import MathematicalLogic.Computability.Partrec
import MathematicalLogic.FirstOrder.Encoding
import MathematicalLogic.FirstOrder.Proof

namespace FirstOrder.Language

open Primrec

section

variable {ùìõ : Language} [‚àÄ n, Encodable (ùìõ.Func n)]

def Term.funcPR : Primrec 3 :=
  succ.comp‚ÇÅ (mul.comp‚ÇÇ (const 2) (pair.comp‚ÇÇ (proj 0) (pair.comp‚ÇÇ (proj 1) (proj 2))))
@[simp] theorem Term.funcPR_eval {v : Vec (ùìõ.Term n) m} :
  funcPR [m, Encodable.encode f, Encodable.encode v]·µ• = Encodable.encode (f ‚¨ù·∂† v) := by
  simp [funcPR, Term.encode_func]

def Term.substPR : Primrec 2 :=
  (covrec (
    ite.comp‚ÇÉ (odd.comp‚ÇÅ (proj 0))
      (succ.comp‚ÇÅ (mul.comp‚ÇÇ (const 2)
        (pair.comp‚ÇÇ (fst.comp‚ÇÅ (div2.comp‚ÇÅ (proj 0)))
          (pair.comp‚ÇÇ (fst.comp‚ÇÅ (snd.comp‚ÇÅ (div2.comp‚ÇÅ (proj 0))))
            (vmap'.comp‚ÇÉ (fst.comp‚ÇÅ (div2.comp‚ÇÅ (proj 0)))
              (snd.comp‚ÇÅ (snd.comp‚ÇÅ (div2.comp‚ÇÅ (proj 0))))
              (proj 1))))))
      (vget.comp‚ÇÇ (proj 2) (div2.comp‚ÇÅ (proj 0)))))
theorem Term.substPR_eval {t : ùìõ.Term n} {œÉ : ùìõ.Subst n m} :
  substPR [Encodable.encode t, Encodable.encode œÉ]·µ• = Encodable.encode (t[œÉ]‚Çú) := by
  induction t with
  | var x => rw [substPR, covrec_eval]; simp [Vec.encode_eq, Term.encode_var]; rw [vget_eval]
  | func f v ih =>
    rw [substPR, covrec_eval, ‚ÜêsubstPR]; simp [Vec.encode_eq, Term.encode_func]; rw [vmap'_eval]
    ¬∑ simp [‚ÜêVec.encode_eq, ih]
    ¬∑ intro i; simp [Nat.lt_succ]
      apply (Nat.le_mul_of_pos_left _ (by simp)).trans'
      apply (Nat.right_le_pair _ _).trans'
      apply (Nat.right_le_pair _ _).trans'
      apply Vec.le_paired (i := i)

def Subst.shiftPR : Primrec 1 :=
  vmk (mul.comp‚ÇÇ (const 2) (succ.comp‚ÇÅ (proj 0)))
theorem Subst.shiftPR_eval : shiftPR [n]·µ• = Encodable.encode (shift : ùìõ.Subst n (n + 1)) := by
  simp [shiftPR, vmk_eval, Vec.encode_eq, Term.encode_var]

def Term.shiftPR : Primrec 2 :=
  substPR.comp‚ÇÇ (proj 1) (Subst.shiftPR.comp‚ÇÅ (proj 0))
theorem Term.shiftPR_eval {t : ùìõ.Term n} :
  shiftPR [n, Encodable.encode t]·µ• = Encodable.encode (‚Üë‚Çút) := by
  simp [shiftPR, Subst.shiftPR_eval (ùìõ := ùìõ), Term.substPR_eval, Term.shift]

def Subst.liftPR : Primrec 3 :=
  pair.comp‚ÇÇ zero ((vmap (Term.shiftPR.swap)).comp‚ÇÉ (proj 0) (proj 2) (proj 1))
theorem Subst.liftPR_eval {œÉ : ùìõ.Subst n m} :
  liftPR [n, m, Encodable.encode œÉ]·µ• = Encodable.encode (‚áë‚ÇõœÉ) := by
  simp [liftPR, lift]
  simp [Vec.encode_eq, vmap_eval, Term.shiftPR_eval, Term.encode_var]

def Subst.liftNPR : Primrec 4 :=
  (proj 2).prec (liftPR.comp‚ÇÉ (add.comp‚ÇÇ (proj 2) (proj 0)) (add.comp‚ÇÇ (proj 3) (proj 0)) (proj 1))
theorem Subst.liftNPR_eval {œÉ : ùìõ.Subst n m} :
  liftNPR [k, n, m, Encodable.encode œÉ]·µ• = Encodable.encode (‚áë‚Çõ^[k] œÉ) := by
  simp [liftNPR]
  induction k generalizing n m œÉ with simp [liftN]
  | zero => simp [prec_eval_zero]
  | succ k ih => simp [prec_eval_succ, ih, liftPR_eval]

def Subst.singlePR : Primrec 2 :=
  pair.comp‚ÇÇ (proj 1) ((vmk (mul.comp‚ÇÇ (const 2) (proj 0))).comp‚ÇÅ (proj 0))
theorem Subst.singlePR_eval {t : ùìõ.Term n} :
  singlePR [n, Encodable.encode t]·µ• = Encodable.encode (‚Ü¶‚Çõ t : ùìõ.Subst (n + 1) n) := by
  simp [singlePR, vmk_eval, Subst.single]
  simp [Vec.encode_eq, Term.encode_var]

def Subst.assignPR : Primrec 2 :=
  pair.comp‚ÇÇ (proj 1) ((vmk (mul.comp‚ÇÇ (const 2) (succ.comp‚ÇÅ (proj 0)))).comp‚ÇÅ (proj 0))
theorem Subst.assignPR_eval {t : ùìõ.Term (n + 1)} :
  assignPR [n, Encodable.encode t]·µ• = Encodable.encode (‚âî‚Çõ t : ùìõ.Subst (n + 1) (n + 1)) := by
  simp [assignPR, vmk_eval, Subst.assign]
  simp [Vec.encode_eq, Term.encode_var]



variable [‚àÄ n, Encodable (ùìõ.Rel n)]

def Formula.relPR : Primrec 3 :=
  add.comp‚ÇÇ (mul.comp‚ÇÇ (const 4) (pair.comp‚ÇÇ (proj 0) (pair.comp‚ÇÇ (proj 1) (proj 2)))) (const 1)
@[simp] theorem Formula.relPR_eval {v : Vec (ùìõ.Term n) m} :
  relPR [m, Encodable.encode r, Encodable.encode v]·µ• = Encodable.encode (r ‚¨ù ≥ v) := by
  simp [relPR, Formula.encode_rel]

def Formula.eqPR : Primrec 2 :=
  add.comp‚ÇÇ (mul.comp‚ÇÇ (const 4) (pair.comp‚ÇÇ (proj 0) (proj 1))) (const 2)
@[simp] theorem Formula.eqPR_eval {t‚ÇÅ t‚ÇÇ : ùìõ.Term n} :
  eqPR [Encodable.encode t‚ÇÅ, Encodable.encode t‚ÇÇ]·µ• = Encodable.encode (t‚ÇÅ ‚âê t‚ÇÇ) := by
  simp [eqPR, Formula.encode_eq]

def Formula.impPR : Primrec 2 :=
  add.comp‚ÇÇ (mul.comp‚ÇÇ (const 4) (pair.comp‚ÇÇ (proj 0) (proj 1))) (const 3)
@[simp] theorem Formula.impPR_eval {p q : ùìõ.Formula n} :
  impPR [Encodable.encode p, Encodable.encode q]·µ• = Encodable.encode (p ‚áí q) := by
  simp [impPR, Formula.encode_imp]

def Formula.negPR : Primrec 1 :=
  impPR.comp‚ÇÇ (proj 0) zero
@[simp] theorem Formula.negPR_eval {p : ùìõ.Formula n} :
  negPR [Encodable.encode p]·µ• = Encodable.encode (~ p) := by
  simp [negPR]
  nth_rw 2 [‚ÜêFormula.encode_false (ùìõ := ùìõ)]
  rw [impPR_eval]; rfl

def Formula.allPR : Primrec 1 :=
  add.comp‚ÇÇ (mul.comp‚ÇÇ (const 4) (proj 0)) (const 4)
@[simp] theorem Formula.allPR_eval {p : ùìõ.Formula (n + 1)} :
  allPR [Encodable.encode p]·µ• = Encodable.encode (‚àÄ' p) := by
  simp [allPR, Formula.encode_all]

def Formula.andPR : Primrec 2 :=
  negPR.comp‚ÇÅ (impPR.comp‚ÇÇ (proj 0) (negPR.comp‚ÇÅ (proj 1)))
@[simp] theorem Formula.andPR_eval {p q : ùìõ.Formula n} :
  andPR [Encodable.encode p, Encodable.encode q]·µ• = Encodable.encode (p ‚©ë q) := by
  simp [andPR, PropNotation.and]

def Formula.andNPR : Primrec 2 :=
  ((Formula.negPR.comp‚ÇÅ zero).prec (Formula.andPR.comp‚ÇÇ
    (vget.comp‚ÇÇ (proj 3) (sub.comp‚ÇÇ (proj 2) (succ.comp‚ÇÅ (proj 0))))
    (proj 1))).comp‚ÇÉ (proj 0) (proj 0) (proj 1)
@[simp] theorem Formula.andNPR_eval {v : Vec (ùìõ.Formula n) m} :
  andNPR [m, Encodable.encode v]·µ• = Encodable.encode (‚ãÄ i, v i) := by
  simp [andNPR]
  generalize h : prec _ _ = f
  suffices ‚àÄ k (h‚ÇÅ : k ‚â§ m), f [k, m, Encodable.encode v]·µ• = Encodable.encode (‚ãÄ (j : Fin k), v ‚ü®m - k + j, Nat.add_lt_of_lt_sub (Nat.sub_lt_sub_left ((Fin.is_lt _).trans_le h‚ÇÅ) (Fin.is_lt _))‚ü©) by
    specialize this m (by rfl)
    simp at this
    exact this
  intro k h‚ÇÅ
  induction k with
  | zero => rw [‚Üêh, prec_eval_zero]; simp [Formula.andN]; rfl
  | succ k ih =>
    rw [‚Üêh, prec_eval_succ, h]
    simp; rw [ih (Nat.le_of_succ_le h‚ÇÅ), Vec.encode_eq, vget_eval' (by simp; exact Nat.zero_lt_of_lt h‚ÇÅ), andPR_eval]
    congr
    ext i
    simp [Vec.tail, Function.comp_def]
    congr 2
    rw [‚ÜêNat.sub_sub, ‚ÜêNat.add_assoc,
      ‚ÜêNat.sub_add_comm (n := m - k) (Nat.le_sub_of_add_le (by simp [Nat.add_comm, h‚ÇÅ])),
      Nat.sub_add_cancel (Nat.le_add_right_of_le (Nat.le_sub_of_add_le (by simp [Nat.add_comm, h‚ÇÅ])))]

def Formula.depth : ùìõ.Formula n ‚Üí ‚Ñï
| p ‚áí q => max p.depth q.depth
| ‚àÄ' p => p.depth + 1
| _ => 0

def Formula.depthPR : Primrec 1 :=
  covrec (ite.comp‚ÇÉ (not.comp‚ÇÅ (proj 0)) zero
    (ite.comp‚ÇÉ (Primrec.eq.comp‚ÇÇ (mod.comp‚ÇÇ (proj 0) (const 4)) (const 3))
      (max.comp‚ÇÇ
        (vget.comp‚ÇÇ (proj 1) (fst.comp‚ÇÅ (div.comp‚ÇÇ (proj 0) (const 4))))
        (vget.comp‚ÇÇ (proj 1) (snd.comp‚ÇÅ (div.comp‚ÇÇ (proj 0) (const 4)))))
      (ite.comp‚ÇÉ (Primrec.eq.comp‚ÇÇ (mod.comp‚ÇÇ (proj 0) (const 4)) (const 0))
        (succ.comp‚ÇÅ (vget.comp‚ÇÇ (proj 1) (pred.comp‚ÇÅ (div.comp‚ÇÇ (proj 0) (const 4)))))
        zero)))
theorem Formula.depthPR_eval {p : ùìõ.Formula n} :
  depthPR [Encodable.encode p]·µ• = p.depth := by
  induction p with simp [depth]
  | imp p q ih‚ÇÅ ih‚ÇÇ =>
    simp [Formula.encode_imp]
    rw [depthPR, covrec_eval, ‚ÜêdepthPR]
    simp [Nat.mul_add_mod, Vec.eq_two]
    simp [Nat.mul_add_div]
    rw [vget_eval', vget_eval']; simp [ih‚ÇÅ, ih‚ÇÇ]
    all_goals
      apply Nat.succ_le_succ
      apply (Nat.le_add_right _ _).trans'
      apply (Nat.le_mul_of_pos_left _ (by simp)).trans'
      first | apply Nat.left_le_pair | apply Nat.right_le_pair
  | all p ih =>
    simp [Formula.encode_all]
    rw [depthPR, covrec_eval, ‚ÜêdepthPR]
    simp [Nat.mul_add_mod, Vec.eq_two, Vec.head]
    simp [Nat.mul_add_div]
    rw [vget_eval']; simp [ih]
    apply Nat.succ_le_succ
    apply (Nat.le_add_right _ _).trans'
    apply Nat.le_mul_of_pos_left
    simp
  | _ => rw [depthPR, covrec_eval]; simp [Nat.mul_add_mod, Formula.encode_rel, Formula.encode_eq, Formula.encode_false]

def Formula.substPR : Primrec 4 :=
  (paired (covrec (unpaired
    (ite.comp‚ÇÉ (not.comp‚ÇÅ (proj 0)) zero
      (ite.comp‚ÇÉ (Primrec.eq.comp‚ÇÇ (mod.comp‚ÇÇ (proj 0) (const 4)) (const 1))
        (add.comp‚ÇÇ (mul.comp‚ÇÇ (const 4)
          (pair.comp‚ÇÇ (fst.comp‚ÇÅ (div.comp‚ÇÇ (proj 0) (const 4)))
            (pair.comp‚ÇÇ (fst.comp‚ÇÅ (snd.comp‚ÇÅ (div.comp‚ÇÇ (proj 0) (const 4))))
              ((vmap (Term.substPR.comp‚ÇÇ (proj 0) (proj 1))).comp‚ÇÉ
                (fst.comp‚ÇÅ (div.comp‚ÇÇ (proj 0) (const 4)))
                (snd.comp‚ÇÅ (snd.comp‚ÇÅ (div.comp‚ÇÇ (proj 0) (const 4))))
                (Subst.liftNPR.comp‚ÇÑ
                  (sub.comp‚ÇÇ (proj 3) (proj 1)) (proj 4) (proj 5) (proj 6)))))) (const 1))
        (ite.comp‚ÇÉ (Primrec.eq.comp‚ÇÇ (mod.comp‚ÇÇ (proj 0) (const 4)) (const 2))
          (add.comp‚ÇÇ (mul.comp‚ÇÇ (const 4)
            (pair.comp‚ÇÇ
              (Term.substPR.comp‚ÇÇ
                (fst.comp‚ÇÅ (div.comp‚ÇÇ (proj 0) (const 4)))
                (Subst.liftNPR.comp‚ÇÑ
                  (sub.comp‚ÇÇ (proj 3) (proj 1)) (proj 4) (proj 5) (proj 6)))
              (Term.substPR.comp‚ÇÇ
                (snd.comp‚ÇÅ (div.comp‚ÇÇ (proj 0) (const 4)))
                (Subst.liftNPR.comp‚ÇÑ
                  (sub.comp‚ÇÇ (proj 3) (proj 1)) (proj 4) (proj 5) (proj 6))))) (const 2))
          (ite.comp‚ÇÉ (Primrec.eq.comp‚ÇÇ (mod.comp‚ÇÇ (proj 0) (const 4)) (const 3))
            (add.comp‚ÇÇ (mul.comp‚ÇÇ (const 4)
              (pair.comp‚ÇÇ
                (vget.comp‚ÇÇ (proj 2)
                  (pair.comp‚ÇÇ
                    (fst.comp‚ÇÅ (div.comp‚ÇÇ (proj 0) (const 4)))
                    (proj 1)))
                (vget.comp‚ÇÇ (proj 2)
                  (pair.comp‚ÇÇ
                    (snd.comp‚ÇÅ (div.comp‚ÇÇ (proj 0) (const 4)))
                    (proj 1))))) (const 3))
            (add.comp‚ÇÇ (mul.comp‚ÇÇ (const 4)
              (vget.comp‚ÇÇ (proj 2)
                (pair.comp‚ÇÇ
                  (pred.comp‚ÇÅ (div.comp‚ÇÇ (proj 0) (const 4)))
                  (pred.comp‚ÇÅ (proj 1))))) (const 4))))))
  ))).comp‚ÇÜ (proj 2) (depthPR.comp‚ÇÅ (proj 2)) (depthPR.comp‚ÇÅ (proj 2)) (proj 0) (proj 1) (proj 3)
theorem Formula.substPR_eval {p : ùìõ.Formula n} {œÉ : ùìõ.Subst n m} :
  substPR [n, m, Encodable.encode p, Encodable.encode œÉ]·µ• = Encodable.encode (p[œÉ]‚Çö) := by
  simp [substPR, Vec.eq_four]; simp
  generalize h : covrec _ = f
  suffices ‚àÄ d k l (p : ùìõ.Formula l) (h‚ÇÅ : l = n + k), d ‚â• p.depth ‚Üí
    f [(Encodable.encode p).pair d, d + k, n, m, Encodable.encode œÉ]·µ• = Encodable.encode ((h‚ÇÅ ‚ñ∏ p)[‚áë‚Çõ^[k] œÉ]‚Çö) by
    simp [depthPR_eval]
    specialize this p.depth 0 n p rfl (by rfl)
    simp at this
    exact this
  intro d k l p h‚ÇÅ h‚ÇÇ
  induction p generalizing d k with simp [depth] at h‚ÇÇ
  | rel r v =>
    subst h‚ÇÅ; rw [‚Üêh, covrec_eval, h]; simp [Formula.encode_rel, Nat.mul_add_mod, Nat.mul_add_div]
    simp [Vec.encode_eq, vmap_eval]
    congr with i
    simp [Vec.eq_four]; simp [‚ÜêVec.encode_eq, Subst.liftNPR_eval, Term.substPR_eval]
  | eq t‚ÇÅ t‚ÇÇ =>
    subst h‚ÇÅ; rw [‚Üêh, covrec_eval, h]; simp [Formula.encode_eq, Nat.mul_add_mod, Nat.mul_add_div]
    constructor <;> simp [Vec.eq_four] <;> simp [‚ÜêVec.encode_eq, Subst.liftNPR_eval, Term.substPR_eval]
  | false => subst h‚ÇÅ; rw [‚Üêh, covrec_eval]; simp [Formula.encode_false]
  | imp p q ih‚ÇÅ ih‚ÇÇ =>
    subst h‚ÇÅ; rw [‚Üêh, covrec_eval, h]; simp [Formula.encode_imp, Nat.mul_add_mod, Nat.mul_add_div]
    constructor
    ¬∑ rw [vget_eval']
      ¬∑ rw [ih‚ÇÅ d k rfl h‚ÇÇ.left]
      ¬∑ apply Nat.pair_lt_pair_left
        simp [Nat.lt_succ]
        apply (Nat.le_add_right _ _).trans'
        apply (Nat.le_mul_of_pos_left _ (by simp)).trans'
        apply Nat.left_le_pair
    ¬∑ rw [vget_eval']
      ¬∑ rw [ih‚ÇÇ d k rfl h‚ÇÇ.right]
      ¬∑ apply Nat.pair_lt_pair_left
        simp [Nat.lt_succ]
        apply (Nat.le_add_right _ _).trans'
        apply (Nat.le_mul_of_pos_left _ (by simp)).trans'
        apply Nat.right_le_pair
  | all p ih =>
    cases' d with d <;> simp at h‚ÇÇ
    subst h‚ÇÅ; rw [‚Üêh, covrec_eval, h]; simp [Formula.encode_all, Nat.mul_add_mod, Nat.mul_add_div]
    rw [vget_eval']
    ¬∑ rw [Nat.add_right_comm d 1 k, Nat.add_assoc d k 1, ih d (k + 1) rfl h‚ÇÇ, Subst.liftN]
    ¬∑ apply Nat.pair_lt_pair_left'
      ¬∑ simp [Nat.lt_succ]
        apply (Nat.le_add_right _ _).trans'
        exact Nat.le_mul_of_pos_left _ (by simp)
      ¬∑ simp

def Formula.shiftPR : Primrec 2 :=
  substPR.comp‚ÇÑ (proj 0) (succ.comp‚ÇÅ (proj 0)) (proj 1) (Subst.shiftPR.comp‚ÇÅ (proj 0))
theorem Formula.shiftPR_eval {p : ùìõ.Formula n} :
  shiftPR [n, Encodable.encode p]·µ• = Encodable.encode (‚Üë‚Çöp) := by
  simp [shiftPR, Subst.shiftPR_eval (ùìõ := ùìõ), substPR_eval, Formula.shift]

def Formula.substSinglePR : Primrec 3 :=
  substPR.comp‚ÇÑ (succ.comp‚ÇÅ (proj 0)) (proj 0) (proj 1) (Subst.singlePR.comp‚ÇÇ (proj 0) (proj 2))
theorem Formula.substSinglePR_eval {p : ùìõ.Formula (n + 1)} {t : ùìõ.Term n} :
  substSinglePR [n, Encodable.encode p, Encodable.encode t]·µ• = Encodable.encode (p[‚Ü¶‚Çõ t]‚Çö) := by
  simp [substSinglePR, Subst.singlePR_eval, substPR_eval]

def Formula.substAssignPR : Primrec 3 :=
  substPR.comp‚ÇÑ (succ.comp‚ÇÅ (proj 0)) (succ.comp‚ÇÅ (proj 0)) (proj 1) (Subst.assignPR.comp‚ÇÇ (proj 0) (proj 2))
theorem Formula.substAssignPR_eval {p : ùìõ.Formula (n + 1)} {t : ùìõ.Term (n + 1)} :
  substAssignPR [n, Encodable.encode p, Encodable.encode t]·µ• = Encodable.encode (p[‚âî‚Çõ t]‚Çö) := by
  simp [substAssignPR, Subst.assignPR_eval, substPR_eval]

end



section

variable (ùìõ : Language) [‚àÄ n, Encodable (ùìõ.Func n)] [‚àÄ n, Encodable (ùìõ.Rel n)]

class PrimCodable where
  isFuncPR : Primrec 2
  isFuncPR_eval_pos_iff : ‚àÄ {n m}, 0 < isFuncPR [n, m]·µ• ‚Üî ‚àÉ (f : ùìõ.Func n), m = Encodable.encode f
  isRelPR : Primrec 2
  isRelPR_eval_pos_iff : ‚àÄ {n m}, 0 < isRelPR [n, m]·µ• ‚Üî ‚àÉ (r : ùìõ.Rel n), m = Encodable.encode r

open PrimCodable

variable [ùìõ.PrimCodable]

def isTermPR : Primrec 2 :=
  (covrec (
    ite.comp‚ÇÉ (odd.comp‚ÇÅ (proj 0))
      (mulv [
        (isFuncPR ùìõ).comp‚ÇÇ (fst.comp‚ÇÅ (div2.comp‚ÇÅ (proj 0))) (fst.comp‚ÇÅ (snd.comp‚ÇÅ (div2.comp‚ÇÅ (proj 0)))),
        isvec.comp‚ÇÇ (fst.comp‚ÇÅ (div2.comp‚ÇÅ (proj 0))) (snd.comp‚ÇÅ (snd.comp‚ÇÅ (div2.comp‚ÇÅ (proj 0)))),
        vand.comp‚ÇÇ (fst.comp‚ÇÅ (div2.comp‚ÇÅ (proj 0)))
            (vmap'.comp‚ÇÉ (fst.comp‚ÇÅ (div2.comp‚ÇÅ (proj 0))) (snd.comp‚ÇÅ (snd.comp‚ÇÅ (div2.comp‚ÇÅ (proj 0)))) (proj 1))
      ]·µ•)
      (lt.comp‚ÇÇ (div2.comp‚ÇÅ (proj 0)) (proj 2)))).swap
theorem isTermPR_eval_pos_iff : 0 < ùìõ.isTermPR [n, m]·µ• ‚Üî ‚àÉ (t : ùìõ.Term n), m = Encodable.encode t := by
  constructor
  ¬∑ intro h; simp [isTermPR] at h
    induction' m using Nat.strong_induction_on with m ih
    rw [covrec_eval] at h; simp at h; split at h
    next h' =>
      simp at h
      exists #‚ü®m.div2, h‚ü©
      simp [Term.encode_var, Nat.div2_val]; rw [‚Üêm.bodd_add_div2]; simp [h']
    next h' =>
      simp [mulv_eval_pos_iff] at h
      rcases h with ‚ü®h‚ÇÅ, h‚ÇÇ, h‚ÇÉ‚ü©
      simp [PrimCodable.isFuncPR_eval_pos_iff] at h‚ÇÅ; rcases h‚ÇÅ with ‚ü®f, h‚ÇÅ‚ü©
      simp [isvec_eval_pos_iff] at h‚ÇÇ; rcases h‚ÇÇ with ‚ü®v, h‚ÇÇ‚ü©
      have h'' : ‚àÄ i, v i < m := by
        intro i
        apply lt_of_le_of_lt (Vec.le_paired (i := i))
        rw [‚Üêh‚ÇÇ]
        apply lt_of_le_of_lt (Nat.unpair_right_le _)
        apply lt_of_le_of_lt (Nat.unpair_right_le _)
        conv => rhs; rw [‚Üêm.bodd_add_div2]
        simp [h', Nat.one_add, Nat.lt_succ_iff]
        apply Nat.le_mul_of_pos_left
        simp
      rw [h‚ÇÇ, vmap'_eval h''] at h‚ÇÉ
      simp [vand_eval] at h‚ÇÉ
      replace h‚ÇÉ := Œª i => ih _ (h'' i) (h‚ÇÉ i)
      choose v h‚ÇÉ using h‚ÇÉ
      exists f ‚¨ù·∂† v
      simp [Term.encode_func, Vec.encode_eq, ‚Üêh‚ÇÅ, ‚Üêh‚ÇÉ, ‚Üêh‚ÇÇ]
      nth_rw 1 [‚Üêm.bodd_add_div2]
      simp [h', Nat.one_add]
  ¬∑ rintro ‚ü®t, rfl‚ü©; simp [isTermPR]
    induction t with
    | var x => rw [covrec_eval]; simp [Term.encode_var, Nat.div2_val]
    | func f v ih =>
      rw [covrec_eval]
      simp [Vec.eq_two, Vec.eq_three]
      simp [Term.encode_func, Nat.div2_val, PrimCodable.isFuncPR_eval_pos_iff, isvec_eval_pos_iff, Vec.encode_eq, mulv_eval_pos_iff]
      rw [vmap'_eval]
      ¬∑ simp [vand_eval]; exact ih
      ¬∑ intro i
        apply Nat.succ_le_succ
        apply (Nat.le_mul_of_pos_left _ (by simp)).trans'
        apply (Nat.right_le_pair _ _).trans'
        apply (Nat.right_le_pair _ _).trans'
        apply Vec.le_paired (i := i)

def isFormulaPR : Primrec 2 :=
  (paired (covrec (unpaired (
    ite.comp‚ÇÉ (not.comp‚ÇÅ (proj 0))
      (const 1)
      (ite.comp‚ÇÉ (eq.comp‚ÇÇ (mod.comp‚ÇÇ (proj 0) (const 4)) (const 1))
        (mulv [
          (isRelPR ùìõ).comp‚ÇÇ (fst.comp‚ÇÅ (div.comp‚ÇÇ (proj 0) (const 4))) (fst.comp‚ÇÅ (snd.comp‚ÇÅ (div.comp‚ÇÇ (proj 0) (const 4)))),
          isvec.comp‚ÇÇ (fst.comp‚ÇÅ (div.comp‚ÇÇ (proj 0) (const 4))) (snd.comp‚ÇÅ (snd.comp‚ÇÅ (div.comp‚ÇÇ (proj 0) (const 4)))),
          vand.comp‚ÇÇ (fst.comp‚ÇÅ (div.comp‚ÇÇ (proj 0) (const 4)))
              ((vmap ùìõ.isTermPR.swap).comp‚ÇÉ
                (fst.comp‚ÇÅ (div.comp‚ÇÇ (proj 0) (const 4)))
                (snd.comp‚ÇÅ (snd.comp‚ÇÅ (div.comp‚ÇÇ (proj 0) (const 4))))
                (add.comp‚ÇÇ (proj 4) (sub.comp‚ÇÇ (proj 3) (proj 1)))
                )
        ]·µ•)
        (ite.comp‚ÇÉ (eq.comp‚ÇÇ (mod.comp‚ÇÇ (proj 0) (const 4)) (const 2))
          (mul.comp‚ÇÇ
            (ùìõ.isTermPR.comp‚ÇÇ
              (add.comp‚ÇÇ (proj 4) (sub.comp‚ÇÇ (proj 3) (proj 1)))
              (fst.comp‚ÇÅ (div.comp‚ÇÇ (proj 0) (const 4))))
            (ùìõ.isTermPR.comp‚ÇÇ
              (add.comp‚ÇÇ (proj 4) (sub.comp‚ÇÇ (proj 3) (proj 1)))
              (snd.comp‚ÇÅ (div.comp‚ÇÇ (proj 0) (const 4)))))
          (ite.comp‚ÇÉ (eq.comp‚ÇÇ (mod.comp‚ÇÇ (proj 0) (const 4)) (const 3))
            (mul.comp‚ÇÇ
              (vget.comp‚ÇÇ (proj 2) (pair.comp‚ÇÇ (fst.comp‚ÇÅ (div.comp‚ÇÇ (proj 0) (const 4))) (proj 1)))
              (vget.comp‚ÇÇ (proj 2) (pair.comp‚ÇÇ (snd.comp‚ÇÅ (div.comp‚ÇÇ (proj 0) (const 4))) (proj 1))))
            (mul.comp‚ÇÇ
              (sign.comp‚ÇÅ (proj 1))
              (vget.comp‚ÇÇ (proj 2) (pair.comp‚ÇÇ (pred.comp‚ÇÅ (div.comp‚ÇÇ (proj 0) (const 4))) (pred.comp‚ÇÅ (proj 1))))))))
    )))).comp‚ÇÑ (proj 1) (Formula.depthPR.comp‚ÇÅ (proj 1)) (Formula.depthPR.comp‚ÇÅ (proj 1)) (proj 0)
theorem isFormulaPR_eval_pos_iff : 0 < ùìõ.isFormulaPR [n, m]·µ• ‚Üî ‚àÉ (p : ùìõ.Formula n), m = Encodable.encode p := by
  simp [isFormulaPR, Vec.tail, Function.comp_def]
  rw [Vec.eq_two Œª _ => _]; simp
  generalize h : covrec _ = f
  suffices ‚àÄ d k l (h‚ÇÅ : l = n + k),
    f [m.pair d, d + k, n]·µ• > 0 ‚Üî ‚àÉ (p : ùìõ.Formula l), m = Encodable.encode p ‚àß d ‚â• p.depth by
    specialize this (Formula.depthPR.eval [m]·µ•) 0
    simp at this; rw [this]
    constructor
    ¬∑ intro ‚ü®p, h, _‚ü©; exists p
    ¬∑ intro ‚ü®p, h‚ü©; exists p, h; rw [h, Formula.depthPR_eval]
  intros d k l h‚ÇÅ
  constructor
  ¬∑ subst h‚ÇÅ
    intro h‚ÇÅ
    induction' m using Nat.strong_induction_on with m ih generalizing d k
    rw [‚Üêh, covrec_eval, h] at h‚ÇÅ; simp at h‚ÇÅ; split at h‚ÇÅ
    next h‚ÇÇ => exists ‚ä•; simp [Formula.encode_false, h‚ÇÇ, Formula.depth]
    next h‚ÇÇ =>
      split at h‚ÇÅ
      next h‚ÇÉ =>
        simp [mulv_eval_pos_iff] at h‚ÇÅ; rcases h‚ÇÅ with ‚ü®h‚ÇÅ, h‚ÇÅ', h‚ÇÅ''‚ü©
        simp [PrimCodable.isRelPR_eval_pos_iff] at h‚ÇÅ; rcases h‚ÇÅ with ‚ü®r, h‚ÇÅ‚ü©
        simp [isvec_eval_pos_iff] at h‚ÇÅ'; rcases h‚ÇÅ' with ‚ü®v, h‚ÇÅ'‚ü©
        simp [h‚ÇÅ', vmap_eval, vand_eval, isTermPR_eval_pos_iff] at h‚ÇÅ''
        choose v h‚ÇÅ'' using h‚ÇÅ''
        exists r ‚¨ù ≥ v
        simp [Formula.encode_rel, ‚Üêh‚ÇÅ, ‚Üêh‚ÇÅ', ‚Üêh‚ÇÅ'', Vec.encode_eq, Formula.depth]
        rw [‚Üêh‚ÇÉ, Nat.div_add_mod]
      next _ =>
        split at h‚ÇÅ
        next h‚ÇÉ =>
          simp [isTermPR_eval_pos_iff] at h‚ÇÅ; rcases h‚ÇÅ with ‚ü®‚ü®t‚ÇÅ, h‚ÇÅ‚ü©, t‚ÇÇ, h‚ÇÅ'‚ü©
          exists t‚ÇÅ ‚âê t‚ÇÇ
          simp [Formula.encode_eq, ‚Üêh‚ÇÅ, ‚Üêh‚ÇÅ', Formula.depth]
          rw [‚Üêh‚ÇÉ, Nat.div_add_mod]
        next _ =>
          split at h‚ÇÅ
          next h‚ÇÉ =>
            simp [Vec.eq_two] at h‚ÇÅ; simp at h‚ÇÅ; rcases h‚ÇÅ with ‚ü®h‚ÇÅ, h‚ÇÅ'‚ü©
            have : (Nat.unpair (m / 4)).1 < m :=
              (Nat.unpair_left_le _).trans_lt (Nat.div_lt_self (Nat.zero_lt_of_ne_zero h‚ÇÇ) (by simp))
            rw [vget_eval' (Nat.pair_lt_pair_left _ this)] at h‚ÇÅ
            apply ih _ this at h‚ÇÅ; rcases h‚ÇÅ with ‚ü®p, h‚ÇÅ, h‚ÇÅ''‚ü©
            have : (Nat.unpair (m / 4)).2 < m := 
              (Nat.unpair_right_le _).trans_lt (Nat.div_lt_self (Nat.zero_lt_of_ne_zero h‚ÇÇ) (by simp))
            rw [vget_eval' (Nat.pair_lt_pair_left _ this)] at h‚ÇÅ'
            apply ih _ this at h‚ÇÅ'; rcases h‚ÇÅ' with ‚ü®q, h‚ÇÅ', h‚ÇÅ'''‚ü©
            exists p ‚áí q
            simp [Formula.encode_imp, ‚Üêh‚ÇÅ, ‚Üêh‚ÇÅ', Formula.depth, h‚ÇÅ'', h‚ÇÅ''']
            rw [‚Üêh‚ÇÉ, Nat.div_add_mod]
          next _ =>
            simp [Vec.eq_two] at h‚ÇÅ; simp at h‚ÇÅ
            cases' d with d <;> simp at h‚ÇÅ
            have : m / 4 - 1 < m := by
              apply lt_of_le_of_lt (Nat.pred_le _)
              apply Nat.div_lt_self _ (by simp)
              simp [‚ÜêNat.ne_zero_iff_zero_lt]
              exact h‚ÇÇ
            rw [vget_eval' (Nat.pair_lt_pair_left' this (by simp)), Nat.add_right_comm] at h‚ÇÅ
            apply ih _ this d (k + 1) at h‚ÇÅ
            simp at h‚ÇÅ
            rcases h‚ÇÅ with ‚ü®p, h‚ÇÅ, h‚ÇÅ'‚ü©
            exists ‚àÄ' p
            simp [Formula.encode_all, Formula.depth, h‚ÇÅ', ‚Üêh‚ÇÅ]
            rw [Nat.mul_sub_left_distrib, Nat.sub_add_cancel, Nat.mul_div_cancel']
            ¬∑ match h‚ÇÉ : m % 4 with
              | 0 => exact Nat.dvd_of_mod_eq_zero h‚ÇÉ
              | 1 | 2 | 3 => contradiction
              | _ + 4 =>
                have : m % 4 < 4 := Nat.mod_lt _ (by simp)
                rw [h‚ÇÉ] at this; contradiction
            ¬∑ apply Nat.mul_le_mul_left
              rw [Nat.one_le_div_iff (by simp)]
              by_contra h
              match m with
              | 0 | 1 | 2 | 3 => contradiction
              | _ + 4 => simp at h
  ¬∑ rintro ‚ü®p, rfl, h‚ÇÇ‚ü©
    induction p generalizing d k with subst h‚ÇÅ
    | rel r v =>
      rw [‚Üêh, covrec_eval, h]; simp [Formula.encode_rel, Nat.mul_add_mod, Nat.mul_add_div, Vec.eq_two, mulv_eval_pos_iff]
      simp [PrimCodable.isRelPR_eval_pos_iff, isvec_eval_pos_iff, Vec.encode_eq, vmap_eval, vand_eval, isTermPR_eval_pos_iff]
    | eq t‚ÇÅ t‚ÇÇ =>
      rw [‚Üêh, covrec_eval, h]; simp [Formula.encode_eq, Nat.mul_add_mod, Nat.mul_add_div, Vec.eq_two]
      simp [isTermPR_eval_pos_iff]
    | false =>
      rw [‚Üêh, covrec_eval, h]; simp [Formula.encode_false]
    | imp p q ih‚ÇÅ ih‚ÇÇ =>
      simp [Formula.depth] at h‚ÇÇ
      rw [‚Üêh, covrec_eval, h]; simp [Formula.encode_imp, Nat.mul_add_mod, Nat.mul_add_div, Vec.eq_two]; simp
      constructor
      ¬∑ rw [vget_eval']
        ¬∑ exact ih‚ÇÅ _ _ rfl h‚ÇÇ.left
        ¬∑ apply Nat.pair_lt_pair_left
          apply Nat.succ_le_succ
          apply (Nat.le_add_right _ _).trans'
          apply (Nat.le_mul_of_pos_left _ (by simp)).trans'
          apply Nat.left_le_pair
      ¬∑ rw [vget_eval']
        ¬∑ exact ih‚ÇÇ _ _ rfl h‚ÇÇ.right
        ¬∑ apply Nat.pair_lt_pair_left
          apply Nat.succ_le_succ
          apply (Nat.le_add_right _ _).trans'
          apply (Nat.le_mul_of_pos_left _ (by simp)).trans'
          apply Nat.right_le_pair
    | all p ih =>
      simp [Formula.depth] at h‚ÇÇ
      cases' d with d <;> simp at h‚ÇÇ
      rw [‚Üêh, covrec_eval, h]; simp [Formula.encode_all, Nat.mul_add_mod, Nat.mul_add_div, Vec.eq_two]; simp [Nat.add_right_comm]
      rw [vget_eval']
      ¬∑ exact ih d (k + 1) rfl h‚ÇÇ
      ¬∑ apply Nat.pair_lt_pair_left'
        ¬∑ apply Nat.succ_le_succ
          apply (Nat.le_add_right _ _).trans'
          apply Nat.le_mul_of_pos_left
          simp
        ¬∑ simp

def isAxiomPR : Primrec 2 :=
  (paired (covrec (unpaired
    (addv [
      bdExists (proj 0) (bdExists (proj 1) (mulv [
        ùìõ.isFormulaPR.comp‚ÇÇ (add.comp‚ÇÇ (proj 6) (sub.comp‚ÇÇ (proj 5) (proj 3))) (proj 1),
        ùìõ.isFormulaPR.comp‚ÇÇ (add.comp‚ÇÇ (proj 6) (sub.comp‚ÇÇ (proj 5) (proj 3))) (proj 0),
        eq.comp‚ÇÇ (proj 2) (Formula.impPR.comp‚ÇÇ (proj 1) (Formula.impPR.comp‚ÇÇ (proj 0) (proj 1)))
      ]·µ•)),
      bdExists (proj 0) (bdExists (proj 1) (bdExists (proj 2) (mulv [
        ùìõ.isFormulaPR.comp‚ÇÇ (add.comp‚ÇÇ (proj 7) (sub.comp‚ÇÇ (proj 6) (proj 4))) (proj 2),
        ùìõ.isFormulaPR.comp‚ÇÇ (add.comp‚ÇÇ (proj 7) (sub.comp‚ÇÇ (proj 6) (proj 4))) (proj 1),
        ùìõ.isFormulaPR.comp‚ÇÇ (add.comp‚ÇÇ (proj 7) (sub.comp‚ÇÇ (proj 6) (proj 4))) (proj 0),
        eq.comp‚ÇÇ (proj 3) (Formula.impPR.comp‚ÇÇ
          (Formula.impPR.comp‚ÇÇ (proj 2) (Formula.impPR.comp‚ÇÇ (proj 1) (proj 0)))
          (Formula.impPR.comp‚ÇÇ
            (Formula.impPR.comp‚ÇÇ (proj 2) (proj 1))
            (Formula.impPR.comp‚ÇÇ (proj 2) (proj 0))))
      ]·µ•))),
      bdExists (proj 0) (bdExists (proj 1) (mulv [
        ùìõ.isFormulaPR.comp‚ÇÇ (add.comp‚ÇÇ (proj 6) (sub.comp‚ÇÇ (proj 5) (proj 3))) (proj 1),
        ùìõ.isFormulaPR.comp‚ÇÇ (add.comp‚ÇÇ (proj 6) (sub.comp‚ÇÇ (proj 5) (proj 3))) (proj 0),
        eq.comp‚ÇÇ (proj 2) (Formula.impPR.comp‚ÇÇ
          (Formula.impPR.comp‚ÇÇ (Formula.negPR.comp‚ÇÅ (proj 1)) (Formula.negPR.comp‚ÇÅ (proj 0)))
          (Formula.impPR.comp‚ÇÇ (proj 0) (proj 1)))
      ]·µ•)),
      bdExists (proj 0) (bdExists (succ.comp‚ÇÅ (proj 1)) (mulv [
        ùìõ.isFormulaPR.comp‚ÇÇ (succ.comp‚ÇÅ (add.comp‚ÇÇ (proj 6) (sub.comp‚ÇÇ (proj 5) (proj 3)))) (proj 1),
        ùìõ.isTermPR.comp‚ÇÇ (add.comp‚ÇÇ (proj 6) (sub.comp‚ÇÇ (proj 5) (proj 3))) (proj 0),
        eq.comp‚ÇÇ (proj 2) (Formula.impPR.comp‚ÇÇ
          (Formula.allPR.comp‚ÇÅ (proj 1))
          (Formula.substSinglePR.comp‚ÇÉ (add.comp‚ÇÇ (proj 6) (sub.comp‚ÇÇ (proj 5) (proj 3))) (proj 1) (proj 0)))
      ]·µ•)),
      bdExists (proj 0) (mulv [
        ùìõ.isFormulaPR.comp‚ÇÇ (add.comp‚ÇÇ (proj 5) (sub.comp‚ÇÇ (proj 4) (proj 2))) (proj 0),
        eq.comp‚ÇÇ (proj 1) (Formula.impPR.comp‚ÇÇ (proj 0) (Formula.allPR.comp‚ÇÅ (Formula.shiftPR.comp‚ÇÇ (add.comp‚ÇÇ (proj 5) (sub.comp‚ÇÇ (proj 4) (proj 2))) (proj 0))))
      ]·µ•),
      bdExists (proj 0) (bdExists (proj 1) (mulv [
        ùìõ.isFormulaPR.comp‚ÇÇ (succ.comp‚ÇÅ (add.comp‚ÇÇ (proj 6) (sub.comp‚ÇÇ (proj 5) (proj 3)))) (proj 1),
        ùìõ.isFormulaPR.comp‚ÇÇ (succ.comp‚ÇÅ (add.comp‚ÇÇ (proj 6) (sub.comp‚ÇÇ (proj 5) (proj 3)))) (proj 0),
        eq.comp‚ÇÇ (proj 2) (Formula.impPR.comp‚ÇÇ
          (Formula.allPR.comp‚ÇÅ (Formula.impPR.comp‚ÇÇ (proj 1) (proj 0)))
          (Formula.impPR.comp‚ÇÇ (Formula.allPR.comp‚ÇÅ (proj 1)) (Formula.allPR.comp‚ÇÅ (proj 0))))
      ]·µ•)),
      bdExists (proj 0) (mulv [
        ùìõ.isTermPR.comp‚ÇÇ (add.comp‚ÇÇ (proj 5) (sub.comp‚ÇÇ (proj 4) (proj 2))) (proj 0),
        eq.comp‚ÇÇ (proj 1) (Formula.eqPR.comp‚ÇÇ (proj 0) (proj 0))
      ]·µ•),
      bdExists (proj 0) (bdExists (proj 1) (mulv [
        ùìõ.isTermPR.comp‚ÇÇ (add.comp‚ÇÇ (proj 6) (sub.comp‚ÇÇ (proj 5) (proj 3))) (proj 1),
        ùìõ.isTermPR.comp‚ÇÇ (add.comp‚ÇÇ (proj 6) (sub.comp‚ÇÇ (proj 5) (proj 3))) (proj 0),
        eq.comp‚ÇÇ (proj 2) (Formula.impPR.comp‚ÇÇ
          (Formula.eqPR.comp‚ÇÇ (proj 1) (proj 0))
          (Formula.eqPR.comp‚ÇÇ (proj 0) (proj 1)))
      ]·µ•)),
      bdExists (proj 0) (bdExists (proj 1) (bdExists (proj 2) (mulv [
        ùìõ.isTermPR.comp‚ÇÇ (add.comp‚ÇÇ (proj 7) (sub.comp‚ÇÇ (proj 6) (proj 4))) (proj 2),
        ùìõ.isTermPR.comp‚ÇÇ (add.comp‚ÇÇ (proj 7) (sub.comp‚ÇÇ (proj 6) (proj 4))) (proj 1),
        ùìõ.isTermPR.comp‚ÇÇ (add.comp‚ÇÇ (proj 7) (sub.comp‚ÇÇ (proj 6) (proj 4))) (proj 0),
        eq.comp‚ÇÇ (proj 3) (Formula.impPR.comp‚ÇÇ
          (Formula.eqPR.comp‚ÇÇ (proj 2) (proj 1))
          (Formula.impPR.comp‚ÇÇ
            (Formula.eqPR.comp‚ÇÇ (proj 1) (proj 0))
            (Formula.eqPR.comp‚ÇÇ (proj 2) (proj 0))))
      ]·µ•))),
      bdExists (proj 0) (bdExists (proj 1) (bdExists (proj 2) (bdExists (proj 3) (mulv [
        (isFuncPR ùìõ).comp‚ÇÇ (proj 3) (proj 2),
        isvec.comp‚ÇÇ (proj 3) (proj 1),
        vand.comp‚ÇÇ (proj 3) ((vmap ùìõ.isTermPR.swap).comp‚ÇÉ (proj 3) (proj 1) (add.comp‚ÇÇ (proj 8) (sub.comp‚ÇÇ (proj 7) (proj 5)))),
        isvec.comp‚ÇÇ (proj 3) (proj 0),
        vand.comp‚ÇÇ (proj 3) ((vmap ùìõ.isTermPR.swap).comp‚ÇÉ (proj 3) (proj 0) (add.comp‚ÇÇ (proj 8) (sub.comp‚ÇÇ (proj 7) (proj 5)))),
        eq.comp‚ÇÇ (proj 4) (Formula.impPR.comp‚ÇÇ
          (Formula.andNPR.comp‚ÇÇ (proj 3)
            ((vmk (Formula.eqPR.comp‚ÇÇ
              (vget.comp‚ÇÇ (proj 1) (proj 0))
              (vget.comp‚ÇÇ (proj 2) (proj 0)))).comp‚ÇÉ (proj 3) (proj 1) (proj 0)))
          (Formula.eqPR.comp‚ÇÇ
            (Term.funcPR.comp‚ÇÉ (proj 3) (proj 2) (proj 1))
            (Term.funcPR.comp‚ÇÉ (proj 3) (proj 2) (proj 0))))
      ]·µ•)))),
      bdExists (proj 0) (bdExists (proj 1) (bdExists (proj 2) (bdExists (proj 3) (mulv [
        (isRelPR ùìõ).comp‚ÇÇ (proj 3) (proj 2),
        isvec.comp‚ÇÇ (proj 3) (proj 1),
        vand.comp‚ÇÇ (proj 3) ((vmap ùìõ.isTermPR.swap).comp‚ÇÉ (proj 3) (proj 1) (add.comp‚ÇÇ (proj 8) (sub.comp‚ÇÇ (proj 7) (proj 5)))),
        isvec.comp‚ÇÇ (proj 3) (proj 0),
        vand.comp‚ÇÇ (proj 3) ((vmap ùìõ.isTermPR.swap).comp‚ÇÉ (proj 3) (proj 0) (add.comp‚ÇÇ (proj 8) (sub.comp‚ÇÇ (proj 7) (proj 5)))),
        eq.comp‚ÇÇ (proj 4) (Formula.impPR.comp‚ÇÇ
          (Formula.andNPR.comp‚ÇÇ (proj 3)
            ((vmk (Formula.eqPR.comp‚ÇÇ
              (vget.comp‚ÇÇ (proj 1) (proj 0))
              (vget.comp‚ÇÇ (proj 2) (proj 0)))).comp‚ÇÉ (proj 3) (proj 1) (proj 0)))
          (Formula.impPR.comp‚ÇÇ
            (Formula.relPR.comp‚ÇÉ (proj 3) (proj 2) (proj 1))
            (Formula.relPR.comp‚ÇÉ (proj 3) (proj 2) (proj 0))))
      ]·µ•)))),
      bdExists (proj 0) (mulv [
        ùìõ.isFormulaPR.comp‚ÇÇ (succ.comp‚ÇÅ (add.comp‚ÇÇ (proj 5) (sub.comp‚ÇÇ (proj 4) (proj 2)))) (proj 0),
        vget.comp‚ÇÇ (proj 3) (pair.comp‚ÇÇ (proj 0) (pred.comp‚ÇÅ (proj 2))),
        eq.comp‚ÇÇ (proj 1) (Formula.allPR.comp‚ÇÅ (proj 0))
      ]·µ•)
    ]·µ•)))).comp‚ÇÑ (proj 1) (Formula.depthPR.comp‚ÇÅ (proj 1)) (Formula.depthPR.comp‚ÇÅ (proj 1)) (proj 0)

set_option maxHeartbeats 1300000

theorem isAxiomPR_eval_pos_iff [HasConstEncodeZero ùìõ] {p : ùìõ.Formula n} :
  0 < ùìõ.isAxiomPR [n, Encodable.encode p]·µ• ‚Üî p ‚àà ùìõ.Axiom := by
  simp [isAxiomPR, Vec.tail, Function.comp_def]
  rw [Vec.eq_two Œª _ => _]; simp
  generalize h : covrec _ = f
  suffices ‚àÄ d k l (p : ùìõ.Formula l) (h‚ÇÅ : l = n + k), d ‚â• p.depth ‚Üí
      (0 < f [(Encodable.encode p).pair d, d + k, n]·µ• ‚Üî p ‚àà ùìõ.Axiom) by
    specialize this p.depth 0 n p rfl (by rfl)
    simp at this; rw [Formula.depthPR_eval, this]
  intros d k l p h‚ÇÅ h‚ÇÇ
  constructor
  ¬∑ subst h‚ÇÅ
    induction' h‚ÇÅ : Encodable.encode p using Nat.strong_induction_on with m ih generalizing d k p
    subst h‚ÇÅ
    rw [‚Üêh, covrec_eval, h]
    simp [addv_eval_pos_iff, Fin.forall_fin_succ]
    refine ‚ü®?_, ?_, ?_, ?_, ?_, ?_, ?_, ?_, ?_, ?_, ?_, ?_‚ü© <;> intro h
    ¬∑ simp [bdExists_eval_pos_iff, mulv_eval_pos_iff, isFormulaPR_eval_pos_iff] at h
      rcases h with ‚ü®_, _, _, _, ‚ü®p, rfl‚ü©, ‚ü®q, rfl‚ü©, h‚ü©
      simp at h; subst h
      exact .imp_self
    ¬∑ simp [Fin.ofNat_succ 6, bdExists_eval_pos_iff, mulv_eval_pos_iff, Fin.forall_fin_succ, isFormulaPR_eval_pos_iff] at h
      rcases h with ‚ü®_, _, _, _, _, _, ‚ü®p, rfl‚ü©, ‚ü®q, rfl‚ü©, ‚ü®r, rfl‚ü©, h‚ü©
      simp at h; subst h
      exact .imp_distrib
    ¬∑ simp [bdExists_eval_pos_iff, mulv_eval_pos_iff, isFormulaPR_eval_pos_iff] at h
      rcases h with ‚ü®_, _, _, _, ‚ü®p, rfl‚ü©, ‚ü®q, rfl‚ü©, h‚ü©
      simp at h; subst h
      exact .transpose
    ¬∑ simp [bdExists_eval_pos_iff, mulv_eval_pos_iff, isTermPR_eval_pos_iff, isFormulaPR_eval_pos_iff] at h
      rcases h with ‚ü®_, _, _, _, ‚ü®p, rfl‚ü©, ‚ü®t, rfl‚ü©, h‚ü©
      simp [Formula.substSinglePR_eval] at h; subst h
      exact .forall_elim
    ¬∑ simp [bdExists_eval_pos_iff, mulv_eval_pos_iff, isFormulaPR_eval_pos_iff] at h
      rcases h with ‚ü®_, _, ‚ü®p, rfl‚ü©, h‚ü©
      simp [Formula.shiftPR_eval] at h; subst h
      exact .forall_self
    ¬∑ simp [bdExists_eval_pos_iff, mulv_eval_pos_iff, isFormulaPR_eval_pos_iff] at h
      rcases h with ‚ü®_, _, _, _, ‚ü®p, rfl‚ü©, ‚ü®q, rfl‚ü©, h‚ü©
      simp at h; subst h
      exact .forall_imp
    ¬∑ simp [bdExists_eval_pos_iff, mulv_eval_pos_iff, isTermPR_eval_pos_iff] at h
      rcases h with ‚ü®_, _, ‚ü®t, rfl‚ü©, h‚ü©
      simp at h; subst h
      exact .eq_refl
    ¬∑ simp [bdExists_eval_pos_iff, mulv_eval_pos_iff, isTermPR_eval_pos_iff] at h
      rcases h with ‚ü®_, _, _, _, ‚ü®t‚ÇÅ, rfl‚ü©, ‚ü®t‚ÇÇ, rfl‚ü©, h‚ü©
      simp at h; subst h
      exact .eq_symm
    ¬∑ simp [Fin.ofNat_succ 6, bdExists_eval_pos_iff, mulv_eval_pos_iff, Fin.forall_fin_succ, isTermPR_eval_pos_iff] at h
      rcases h with ‚ü®_, _, _, _, _, _, ‚ü®t‚ÇÅ, rfl‚ü©, ‚ü®t‚ÇÇ, rfl‚ü©, ‚ü®t‚ÇÉ, rfl‚ü©, h‚ü©
      simp at h; subst h
      exact .eq_trans
    ¬∑ simp [Fin.ofNat_succ 6, Fin.ofNat_succ 7, bdExists_eval_pos_iff, mulv_eval_pos_iff, Fin.forall_fin_succ, isFuncPR_eval_pos_iff, isvec_eval_pos_iff] at h
      rcases h with ‚ü®m, _, _, _, _, _, _, _, ‚ü®f, rfl‚ü©, ‚ü®_, rfl‚ü©, h', ‚ü®_, rfl‚ü©, h'', h‚ü©
      simp [vmap_eval, vand_eval, isTermPR_eval_pos_iff] at h' h''
      choose v‚ÇÅ h' using h'
      choose v‚ÇÇ h'' using h''
      simp [funext h', funext h'', vmk_eval, vget_eval] at h
      simp [‚ÜêVec.encode_eq] at h; subst h
      exact .eq_congr_func
    ¬∑ simp [Fin.ofNat_succ 6, Fin.ofNat_succ 7, Fin.ofNat_succ 8, bdExists_eval_pos_iff, mulv_eval_pos_iff, Fin.forall_fin_succ, isRelPR_eval_pos_iff, isvec_eval_pos_iff] at h
      rcases h with ‚ü®m, _, _, _, _, _, _, _, ‚ü®r, rfl‚ü©, ‚ü®_, rfl‚ü©, h', ‚ü®_, rfl‚ü©, h'', h‚ü©
      simp [vmap_eval, vand_eval, isTermPR_eval_pos_iff] at h' h''
      choose v‚ÇÅ h' using h'
      choose v‚ÇÇ h'' using h''
      simp [funext h', funext h'', vmk_eval, vget_eval] at h
      simp [‚ÜêVec.encode_eq] at h; subst h
      exact .eq_congr_rel
    ¬∑ simp [Fin.ofNat_succ 6, Fin.ofNat_succ 7, Fin.ofNat_succ 8, Fin.ofNat_succ 9, bdExists_eval_pos_iff, mulv_eval_pos_iff, isFormulaPR_eval_pos_iff] at h
      rcases h with ‚ü®_, _, ‚ü®p, rfl‚ü©, h, h'‚ü©
      simp at h'; subst h'
      cases' d with d <;> simp [Formula.depth] at h‚ÇÇ
      simp at h; rw [vget_eval'] at h
      ¬∑ simp [Nat.add_right_comm] at h
        apply ih (Encodable.encode p) Formula.encode_lt_all d (k + 1) p h‚ÇÇ rfl at h
        exact .all h
      ¬∑ apply Nat.pair_lt_pair_left'
        ¬∑ exact Formula.encode_lt_all
        ¬∑ simp
  ¬∑ intro h‚ÇÉ
    induction h‚ÇÉ generalizing d k with (subst h‚ÇÅ; rw [‚Üêh, covrec_eval, h]; simp [addv_eval_pos_iff])
    | @imp_self _ p q =>
      exists 0; simp [bdExists_eval_pos_iff, mulv_eval_pos_iff]
      refine ‚ü®Encodable.encode p, ?_, Encodable.encode q, ?_, ?_‚ü©
      ¬∑ exact Formula.encode_lt_imp_left
      ¬∑ apply Formula.encode_lt_imp_right.trans'
        exact Formula.encode_lt_imp_left
      ¬∑ simp [isFormulaPR_eval_pos_iff]
    | @imp_distrib _ p q r =>
      exists 1; simp [bdExists_eval_pos_iff, mulv_eval_pos_iff]
      refine ‚ü®Encodable.encode p, ?_, Encodable.encode q, ?_, Encodable.encode r, ?_, ?_‚ü©
      ¬∑ apply Formula.encode_lt_imp_left.trans'
        exact Formula.encode_lt_imp_left
      ¬∑ apply Formula.encode_lt_imp_left.trans'
        apply Formula.encode_lt_imp_right.trans'
        exact Formula.encode_lt_imp_left
      ¬∑ apply Formula.encode_lt_imp_left.trans'
        apply Formula.encode_lt_imp_right.trans'
        exact Formula.encode_lt_imp_right
      ¬∑ simp [Fin.forall_fin_succ, isFormulaPR_eval_pos_iff]
    | @transpose _ p q =>
      exists 2; simp [bdExists_eval_pos_iff, mulv_eval_pos_iff]
      refine ‚ü®Encodable.encode p, ?_, Encodable.encode q, ?_, ?_‚ü©
      ¬∑ apply Formula.encode_lt_imp_right.trans'
        exact Formula.encode_lt_imp_right
      ¬∑ apply Formula.encode_lt_imp_right.trans'
        exact Formula.encode_lt_imp_left
      ¬∑ simp [isFormulaPR_eval_pos_iff]
    | @forall_elim _ p t =>
      rcases Formula.exists_encode_le_succ_subst_single (p := p) (t := t) with ‚ü®t', h‚ÇÅ, h‚ÇÇ‚ü©
      exists 3; simp [bdExists_eval_pos_iff, mulv_eval_pos_iff]
      refine ‚ü®Encodable.encode p, ?_, Encodable.encode t', ?_, ?_‚ü©
      ¬∑ apply Formula.encode_lt_imp_left.trans'
        exact Formula.encode_lt_all
      ¬∑ apply h‚ÇÇ.trans_lt
        simp
        apply Formula.encode_lt_imp_right
      ¬∑ simp [isTermPR_eval_pos_iff, isFormulaPR_eval_pos_iff, Formula.substSinglePR_eval, h‚ÇÅ]
    | @forall_self _ p =>
      exists 4; simp [bdExists_eval_pos_iff, mulv_eval_pos_iff]
      refine ‚ü®Encodable.encode p, ?_, ?_‚ü©
      ¬∑ exact Formula.encode_lt_imp_left
      ¬∑ simp [isFormulaPR_eval_pos_iff, Formula.shiftPR_eval]
    | @forall_imp _ p q =>
      exists 5; simp [bdExists_eval_pos_iff, mulv_eval_pos_iff]
      refine ‚ü®Encodable.encode p, ?_, Encodable.encode q, ?_, ?_‚ü©
      ¬∑ apply Formula.encode_lt_imp_left.trans'
        apply Formula.encode_lt_all.trans'
        exact Formula.encode_lt_imp_left
      ¬∑ apply Formula.encode_lt_imp_left.trans'
        apply Formula.encode_lt_all.trans'
        exact Formula.encode_lt_imp_right
      ¬∑ simp [isFormulaPR_eval_pos_iff]
    | @eq_refl _ t =>
      exists 6; simp [bdExists_eval_pos_iff, mulv_eval_pos_iff]
      refine ‚ü®Encodable.encode t, ?_, ?_‚ü©
      ¬∑ exact Formula.encode_lt_eq_left
      ¬∑ simp [isTermPR_eval_pos_iff]
    | @eq_symm _ t‚ÇÅ t‚ÇÇ =>
      exists 7; simp [Fin.ofNat_succ 6, bdExists_eval_pos_iff, mulv_eval_pos_iff]
      refine ‚ü®Encodable.encode t‚ÇÅ, ?_, Encodable.encode t‚ÇÇ, ?_, ?_‚ü©
      ¬∑ apply Formula.encode_lt_imp_left.trans'
        exact Formula.encode_lt_eq_left
      ¬∑ apply Formula.encode_lt_imp_left.trans'
        exact Formula.encode_lt_eq_right
      ¬∑ simp [isTermPR_eval_pos_iff]
    | @eq_trans _ t‚ÇÅ t‚ÇÇ t‚ÇÉ =>
      exists 8; simp [Fin.ofNat_succ 6, Fin.ofNat_succ 7, bdExists_eval_pos_iff, mulv_eval_pos_iff]
      refine ‚ü®Encodable.encode t‚ÇÅ, ?_, Encodable.encode t‚ÇÇ, ?_, Encodable.encode t‚ÇÉ, ?_, ?_‚ü©
      ¬∑ apply Formula.encode_lt_imp_left.trans'
        exact Formula.encode_lt_eq_left
      ¬∑ apply Formula.encode_lt_imp_left.trans'
        exact Formula.encode_lt_eq_right
      ¬∑ apply Formula.encode_lt_imp_right.trans'
        apply Formula.encode_lt_imp_left.trans'
        exact Formula.encode_lt_eq_right
      ¬∑ simp [Fin.forall_fin_succ, isTermPR_eval_pos_iff]
    | @eq_congr_func m _ v‚ÇÅ v‚ÇÇ f =>
      exists 9; simp [Fin.ofNat_succ 6, Fin.ofNat_succ 7, Fin.ofNat_succ 8, bdExists_eval_pos_iff, mulv_eval_pos_iff]
      refine ‚ü®m, ?_, Encodable.encode f, ?_, Encodable.encode v‚ÇÅ, ?_, Encodable.encode v‚ÇÇ, ?_, ?_‚ü©
      ¬∑ apply Formula.encode_lt_imp_right.trans'
        apply Formula.encode_lt_eq_left.trans'
        exact Term.encode_lt_func_m (ùìõ := ùìõ)
      ¬∑ apply Formula.encode_lt_imp_right.trans'
        apply Formula.encode_lt_eq_left.trans'
        exact Term.encode_lt_func_f (ùìõ := ùìõ)
      ¬∑ apply Formula.encode_lt_imp_right.trans'
        apply Formula.encode_lt_eq_left.trans'
        exact Term.encode_lt_func_v (ùìõ := ùìõ)
      ¬∑ apply Formula.encode_lt_imp_right.trans'
        apply Formula.encode_lt_eq_right.trans'
        exact Term.encode_lt_func_v (ùìõ := ùìõ)
      ¬∑ simp [Fin.forall_fin_succ, isFuncPR_eval_pos_iff, isTermPR_eval_pos_iff, isvec_eval_pos_iff, vmap_eval, vand_eval, Vec.encode_eq]
        simp [‚ÜêVec.encode_eq, vmk_eval]
        simp [Vec.encode_eq, vget_eval]
        simp [‚ÜêVec.encode_eq]
    | @eq_congr_rel m _ v‚ÇÅ v‚ÇÇ r =>
      exists 10; simp [Fin.ofNat_succ 6, Fin.ofNat_succ 7, Fin.ofNat_succ 8, Fin.ofNat_succ 9, bdExists_eval_pos_iff, mulv_eval_pos_iff]
      refine ‚ü®m, ?_, Encodable.encode r, ?_, Encodable.encode v‚ÇÅ, ?_, Encodable.encode v‚ÇÇ, ?_, ?_‚ü©
      ¬∑ apply Formula.encode_lt_imp_right.trans'
        apply Formula.encode_lt_imp_left.trans'
        exact Formula.encode_lt_rel_m (ùìõ := ùìõ)
      ¬∑ apply Formula.encode_lt_imp_right.trans'
        apply Formula.encode_lt_imp_left.trans'
        exact Formula.encode_lt_rel_r (ùìõ := ùìõ)
      ¬∑ apply Formula.encode_lt_imp_right.trans'
        apply Formula.encode_lt_imp_left.trans'
        exact Formula.encode_lt_rel_v (ùìõ := ùìõ)
      ¬∑ apply Formula.encode_lt_imp_right.trans'
        apply Formula.encode_lt_imp_right.trans'
        exact Formula.encode_lt_rel_v (ùìõ := ùìõ)
      ¬∑ simp [Fin.forall_fin_succ, isRelPR_eval_pos_iff, isTermPR_eval_pos_iff, isvec_eval_pos_iff, vmap_eval, vand_eval, Vec.encode_eq]
        simp [‚ÜêVec.encode_eq, vmk_eval]
        simp [Vec.encode_eq, vget_eval]
        simp [‚ÜêVec.encode_eq]
    | @all _ p _ ih =>
      exists 11; simp [Fin.ofNat_succ 6, Fin.ofNat_succ 7, Fin.ofNat_succ 8, Fin.ofNat_succ 9, Fin.ofNat_succ 10, bdExists_eval_pos_iff, mulv_eval_pos_iff]
      refine ‚ü®Encodable.encode p, ?_, ?_‚ü©
      ¬∑ exact Formula.encode_lt_all
      ¬∑ simp [isFormulaPR_eval_pos_iff]
        cases' d with d <;> simp [Formula.depth] at h‚ÇÇ
        simp [Nat.add_right_comm]
        rw [vget_eval']
        ¬∑ simp; exact ih d (k + 1) rfl h‚ÇÇ
        ¬∑ apply Nat.pair_lt_pair_left'
          ¬∑ exact Formula.encode_lt_all
          ¬∑ simp

end

end FirstOrder.Language
