import MathematicalLogic.SecondOrder.Semantics
import Mathlib.Algebra.Field.Basic
import Mathlib.Data.Real.Sqrt

namespace SecondOrder.Language

inductive OrderedField.Func : ‚Ñï ‚Üí Type where
| zero : Func 0
| one : Func 0
| add : Func 2
| neg : Func 1
| mul : Func 2

inductive OrderedField.Rel : ‚Ñï ‚Üí Type where
| le : Rel 2

def OrderedField : Language where
  Func := OrderedField.Func
  Rel := OrderedField.Rel

namespace OrderedField

instance : Zero (OrderedField.Term Œì) := ‚ü®.zero ‚¨ù·∂† []·µ•‚ü©
instance : One (OrderedField.Term Œì) := ‚ü®.one ‚¨ù·∂† []·µ•‚ü©
instance : Add (OrderedField.Term Œì) := ‚ü®(.add ‚¨ù·∂† [¬∑, ¬∑]·µ•)‚ü©
instance : Neg (OrderedField.Term Œì) := ‚ü®(.neg ‚¨ù·∂† [¬∑]·µ•)‚ü©
instance : Sub (OrderedField.Term Œì) := ‚ü®(¬∑ + -¬∑)‚ü©
instance : Mul (OrderedField.Term Œì) := ‚ü®(.mul ‚¨ù·∂† [¬∑, ¬∑]·µ•)‚ü©

def le (t‚ÇÅ t‚ÇÇ : OrderedField.Term Œì) : OrderedField.Formula Œì := .le ‚¨ù ≥ [t‚ÇÅ, t‚ÇÇ]·µ•
scoped infix:60 " ‚™Å " => le

end OrderedField

namespace Theory

open OrderedField

inductive Real : OrderedField.Theory where
| ax_add_assoc : Real (‚àÄ' (‚àÄ' (‚àÄ' (#2 + #1 + #0 ‚âê #2 + (#1 + #0)))))
| ax_add_comm : Real (‚àÄ' (‚àÄ' (#1 + #0 ‚âê #0 + #1)))
| ax_add_zero : Real (‚àÄ' (#0 + 0 ‚âê #0))
| ax_add_neg : Real (‚àÄ' (#0 + (-#0) ‚âê 0))
| ax_mul_assoc : Real (‚àÄ' (‚àÄ' (‚àÄ' (#2 * #1 * #0 ‚âê #2 * (#1 * #0)))))
| ax_mul_comm : Real (‚àÄ' (‚àÄ' (#1 * #0 ‚âê #0 * #1)))
| ax_mul_one : Real (‚àÄ' (#0 * 1 ‚âê #0))
| ax_has_inv : Real (‚àÄ' (~ #0 ‚âê 0 ‚áí ‚àÉ' (#1 * #0 ‚âê 1)))
| ax_left_distrib : Real (‚àÄ' (‚àÄ' (‚àÄ' (#2 * (#1 + #0) ‚âê #2 * #1 + #2 * #0))))
| ax_zero_ne_one : Real (~ 0 ‚âê 1)
| ax_le_refl : Real (‚àÄ' (#0 ‚™Å #0))
| ax_le_antisymm : Real (‚àÄ' (‚àÄ' (#1 ‚™Å #0 ‚áí #0 ‚™Å #1 ‚áí #1 ‚âê #0)))
| ax_le_trans : Real (‚àÄ' (‚àÄ' (‚àÄ' (#2 ‚™Å #1 ‚áí #1 ‚™Å #0 ‚áí #2 ‚™Å #0))))
| ax_le_total : Real (‚àÄ' (‚àÄ' (#1 ‚™Å #0 ‚©í #0 ‚™Å #1)))
| ax_add_le_add : Real (‚àÄ' (‚àÄ' (‚àÄ' (#2 ‚™Å #1 ‚áí #2 + #0 ‚™Å #1 + #0))))
| ax_mul_le_mul : Real (‚àÄ' (‚àÄ' (‚àÄ' (#2 ‚™Å #1 ‚áí 0 ‚™Å #0 ‚áí #2 * #0 ‚™Å #1 * #0))))
| ax_exists_lub : Real (‚àÄ ≥ 1 (‚àÉ' (1 ‚¨ù ≥·µõ [#0]·µ•) ‚áí ‚àÉ' (‚àÄ' (2 ‚¨ù ≥·µõ [#0]·µ• ‚áí #0 ‚™Å #1)) ‚áí ‚àÉ' (‚àÄ' (2 ‚¨ù ≥·µõ [#0]·µ• ‚áí #0 ‚™Å #1) ‚©ë ‚àÄ' (‚àÄ' (3 ‚¨ù ≥·µõ [#0]·µ• ‚áí #0 ‚™Å #1) ‚áí #1 ‚™Å #0))))

namespace Real

attribute [local simp] Structure.interp Structure.satisfy Structure.satisfySentence Structure.Assignment.cons Vec.eq_nil Vec.eq_one Vec.eq_two

noncomputable def ùì° : Real.Model where
  Dom := ‚Ñù
  interpFunc
  | .zero, _ => 0
  | .one, _ => 1
  | .add, v => v 0 + v 1
  | .neg, v => - v 0
  | .mul, v => v 0 * v 1
  interpRel
  | .le, v => v 0 ‚â§ v 1
  satisfy_theory p h := by
    cases h with simp [OrderedField.le]
    | ax_add_assoc => apply add_assoc
    | ax_add_comm => apply add_comm
    | ax_mul_assoc => apply mul_assoc
    | ax_mul_comm => apply mul_comm
    | ax_has_inv => intro a h; exists a‚Åª¬π; exact mul_inv_cancel‚ÇÄ h
    | ax_left_distrib => apply left_distrib
    | ax_le_antisymm => apply le_antisymm
    | ax_le_trans => apply le_trans
    | ax_le_total => apply le_total
    | ax_mul_le_mul => intro a b c; apply mul_le_mul_of_nonneg_right
    | ax_exists_lub =>
      intro R a h‚ÇÅ b h‚ÇÇ
      exists sSup (R [¬∑]·µ•)
      exact Real.isLUB_sSup ‚ü®a, h‚ÇÅ‚ü© ‚ü®b, h‚ÇÇ‚ü©

variable {M : Real.Model}

instance : Zero M := ‚ü®M.interpFunc .zero []·µ•‚ü©
instance : One M := ‚ü®M.interpFunc .one []·µ•‚ü©
instance : Add M := ‚ü®(M.interpFunc .add [¬∑, ¬∑]·µ•)‚ü©
instance : Neg M := ‚ü®(M.interpFunc .neg [¬∑]·µ•)‚ü©
instance : Mul M := ‚ü®(M.interpFunc .mul [¬∑, ¬∑]·µ•)‚ü©

theorem add_comm (a b : M) : a + b = b + a := by
  have := M.satisfy_theory _ .ax_add_comm a b
  simp at this; exact this

theorem add_zero (a : M) : a + 0 = a := by
  have := M.satisfy_theory _ .ax_add_zero a
  simp at this; exact this

instance : AddCommGroup M where
  add_assoc a b c := by
    have := M.satisfy_theory _ .ax_add_assoc a b c
    simp at this; exact this
  add_comm := add_comm
  zero_add a := by
    rw [add_comm, add_zero]
  add_zero a := add_zero a
  neg_add_cancel a := by
    rw [add_comm (-a) a]
    have := M.satisfy_theory _ .ax_add_neg a
    simp at this; exact this
  nsmul := nsmulRec
  zsmul := zsmulRec

theorem mul_comm (a b : M) : a * b = b * a := by
  have := M.satisfy_theory _ .ax_mul_comm a b
  simp at this; exact this

theorem mul_one (a : M) : a * 1 = a := by
  have := M.satisfy_theory _ .ax_mul_one a
  simp at this; exact this

theorem left_distrib (a b c : M) : a * (b + c) = a * b + a * c := by
  have := M.satisfy_theory _ .ax_left_distrib a b c
  simp at this; exact this

theorem mul_zero (a : M) : a * 0 = 0 := by
  apply add_left_cancel (a := a * 0)
  rw [‚Üêleft_distrib, add_zero, add_zero]

theorem has_inv (a : M) : a ‚â† 0 ‚Üí ‚àÉ b, a * b = 1 := by
  have := M.satisfy_theory _ .ax_has_inv a
  simp at this; exact this

open Classical

noncomputable instance : Inv M where
  inv a := if h : a = 0 then 0 else Classical.choose (has_inv a h)

noncomputable instance : Field M where
  neg_add_cancel := neg_add_cancel
  mul_assoc a b c := by
    have := M.satisfy_theory _ .ax_mul_assoc a b c
    simp at this; exact this
  mul_comm a b := mul_comm a b
  mul_one a := mul_one a
  one_mul a := by rw [mul_comm, mul_one]
  inv_zero := by simp [Inv.inv]
  mul_inv_cancel a h := by
    simp [Inv.inv, h]
    exact Classical.choose_spec (has_inv a h)
  left_distrib a b c := left_distrib a b c
  right_distrib a b c := by
    rw [mul_comm, left_distrib, mul_comm c a, mul_comm c b]
  mul_zero a := mul_zero a
  zero_mul a := by rw [mul_comm, mul_zero]
  exists_pair_ne := by
    exists 0, 1
    have := M.satisfy_theory _ .ax_zero_ne_one
    simp at this; exact this
  zsmul := zsmulRec
  qsmul := _
  nnqsmul := _

instance : LE M := ‚ü®(M.interpRel .le [¬∑, ¬∑]·µ•)‚ü©

noncomputable instance : LinearOrder M where
  le_refl a := by
    have := M.satisfy_theory _ .ax_le_refl a
    simp [OrderedField.le] at this; exact this
  le_antisymm a b := by
    have := M.satisfy_theory _ .ax_le_antisymm a b
    simp [OrderedField.le] at this; exact this
  le_trans a b := by
    have := M.satisfy_theory _ .ax_le_trans a b
    simp [OrderedField.le] at this; exact this
  le_total a b := by
    have := M.satisfy_theory _ .ax_le_total a b
    simp [OrderedField.le] at this; exact this
  decidableLE := _

theorem add_le_add_right (a b c : M) : a ‚â§ b ‚Üí a + c ‚â§ b + c := by
  have := M.satisfy_theory _ .ax_add_le_add a b c
  simp [OrderedField.le] at this; exact this

lemma zero_le_neg_iff (a : M) : 0 ‚â§ -a ‚Üî a ‚â§ 0 := by
  constructor
  ¬∑ intro h
    apply add_le_add_right _ _ a at h
    rw [zero_add, neg_add_cancel] at h
    exact h
  ¬∑ intro h
    apply add_le_add_right _ _ (-a) at h
    rw [zero_add, add_neg_cancel] at h
    exact h

theorem mul_le_mul_right (a b c : M) : a ‚â§ b ‚Üí 0 ‚â§ c ‚Üí a * c ‚â§ b * c := by
  have := M.satisfy_theory _ .ax_mul_le_mul a b c
  simp [OrderedField.le] at this; exact this

noncomputable instance : LinearOrderedField M where
  mul_comm := mul_comm
  inv_zero := inv_zero
  mul_inv_cancel a := mul_inv_cancel‚ÇÄ
  qsmul := _
  nnqsmul := _
  decidableLE := _
  le_total := le_total
  add_le_add_left a b h c := by
    rw [add_comm c a, add_comm c b]
    exact add_le_add_right a b c h
  zero_le_one := by
    by_contra h‚ÇÅ
    simp at h‚ÇÅ
    have h‚ÇÇ : (0 : M) ‚â§ -1 := by
      rw [zero_le_neg_iff 1]
      exact le_of_lt h‚ÇÅ
    have h‚ÇÉ := lt_of_lt_of_le h‚ÇÅ h‚ÇÇ
    have h‚ÇÑ := mul_le_mul_right _ _ _ (le_of_lt h‚ÇÉ) h‚ÇÇ
    rw [mul_neg_one, mul_neg_one, neg_neg] at h‚ÇÑ
    have h‚ÇÖ := h‚ÇÑ.antisymm (le_of_lt h‚ÇÉ)
    simp [h‚ÇÖ] at h‚ÇÉ
  mul_pos a b h‚ÇÅ h‚ÇÇ := by
    apply lt_of_le_of_ne
    ¬∑ have h‚ÇÉ := mul_le_mul_right _ _ _ (le_of_lt h‚ÇÅ) (le_of_lt h‚ÇÇ)
      rw [zero_mul] at h‚ÇÉ; exact h‚ÇÉ
    ¬∑ simp [ne_of_gt h‚ÇÅ, ne_of_gt h‚ÇÇ]

theorem exists_lub (s : Set M) : s.Nonempty ‚Üí BddAbove s ‚Üí ‚àÉ u, IsLUB s u := by
  intro ‚ü®x, h‚ÇÅ‚ü© ‚ü®y, h‚ÇÇ‚ü©
  have := M.satisfy_theory _ .ax_exists_lub
  simp [OrderedField.le] at this
  exact this (¬∑.head ‚àà s) x h‚ÇÅ y h‚ÇÇ

noncomputable def ofReal (x : ‚Ñù) : M :=
  Classical.choose
    (exists_lub { ‚Üëy | (y : ‚Ñö) (_ : ‚Üëy ‚â§ x) }
      ((exists_rat_lt x).elim Œª y h => ‚ü®y, y, le_of_lt h, rfl‚ü©)
      ((exists_rat_gt x).elim Œª y h => ‚ü®y, by
        simp [upperBounds]; intro z; rw [‚Üê@Rat.cast_le z y ‚Ñù]; exact (le_of_lt h).trans'‚ü©))

variable {x y z : ‚Ñù}

theorem ofReal_isLUB : IsLUB { ‚Üëy | (y : ‚Ñö) (_ : ‚Üëy ‚â§ x) } (@ofReal M x) := Classical.choose_spec _

theorem ofReal_rat {q : ‚Ñö} : @ofReal M q = q := by
  apply ofReal_isLUB.unique
  constructor
  ¬∑ intro y; simp; intro z h‚ÇÅ h‚ÇÇ; simp [‚Üêh‚ÇÇ, h‚ÇÅ]
  ¬∑ intro y h‚ÇÅ; simp [upperBounds] at h‚ÇÅ; exact h‚ÇÅ q (by rfl)

theorem ofReal_zero : @ofReal M 0 = 0 := by
  have := @ofReal_rat M 0
  simp at this; exact this

theorem ofReal_one : @ofReal M 1 = 1 := by
  have := @ofReal_rat M 1
  simp at this; exact this

theorem ofReal_lt : @ofReal M x < ofReal y ‚Üî x < y := by
  constructor
  ¬∑ intro h‚ÇÅ
    simp [isLUB_lt_iff ofReal_isLUB, upperBounds] at h‚ÇÅ
    rcases h‚ÇÅ with ‚ü®a, h‚ÇÅ, h‚ÇÇ‚ü©
    by_contra h‚ÇÉ; simp at h‚ÇÉ
    apply not_lt_of_le _ h‚ÇÇ
    simp [isLUB_le_iff ofReal_isLUB, upperBounds]
    intro s h‚ÇÑ
    apply h‚ÇÅ
    exact h‚ÇÑ.trans h‚ÇÉ
  ¬∑ intro h‚ÇÅ
    simp [isLUB_lt_iff ofReal_isLUB, upperBounds]
    rcases exists_rat_btwn h‚ÇÅ with ‚ü®q, h‚ÇÇ, h‚ÇÉ‚ü©
    exists q
    constructor
    ¬∑ intro r h‚ÇÑ
      have := h‚ÇÑ.trans (le_of_lt h‚ÇÇ)
      simp at this; simp [this]
    ¬∑ simp [lt_isLUB_iff ofReal_isLUB]
      rcases exists_rat_btwn h‚ÇÉ with ‚ü®r, h‚ÇÉ, h‚ÇÑ‚ü©
      simp at h‚ÇÉ
      exists r, le_of_lt h‚ÇÑ

theorem ofReal_le : @ofReal M x ‚â§ ofReal y ‚Üî x ‚â§ y := by
  rw [‚Üênot_iff_not, not_le, not_le, ofReal_lt]

theorem ofReal_injective : Function.Injective (@ofReal M) := by
  intro x y h
  apply le_antisymm <;> rw [‚ÜêofReal_le, h]

lemma exists_nat_gt (a : M) : ‚àÉ (n : ‚Ñï), a < n := by
  by_contra h‚ÇÅ
  push_neg at h‚ÇÅ
  let s : Set M := { ‚Üën | (n : ‚Ñï) }
  have h‚ÇÇ : s.Nonempty := by exists 0; simp [s]
  have h‚ÇÉ : BddAbove s := by exists a; simp [s, upperBounds]; exact h‚ÇÅ
  rcases exists_lub s h‚ÇÇ h‚ÇÉ with ‚ü®b, h‚ÇÑ‚ü©
  have h‚ÇÑ : b ‚â§ b - 1 := by
    apply h‚ÇÑ.right
    simp [upperBounds, s]
    intro n
    rw [le_sub_iff_add_le, ‚ÜêNat.cast_add_one]
    exact h‚ÇÑ.left ‚ü®n + 1, rfl‚ü©
  simp at h‚ÇÑ
  exact not_lt_of_ge h‚ÇÑ zero_lt_one

instance : Archimedean M where
  arch x y h := by
    rcases exists_nat_gt (x / y) with ‚ü®n, h'‚ü©
    simp [div_lt_iff‚ÇÄ h] at h'
    exists n
    simp [le_of_lt h']

theorem ofReal_surjective : Function.Surjective (@ofReal M) := by
  intro a
  let s : Set ‚Ñù := { ‚Üëq | (q : ‚Ñö) (_ : q ‚â§ a) }
  have h‚ÇÅ : s.Nonempty := by
    rcases exists_rat_lt a with ‚ü®q, h‚ÇÅ‚ü©
    exists q; simp [s]; exact le_of_lt h‚ÇÅ
  have h‚ÇÇ : BddAbove s := by
    rcases exists_rat_gt a with ‚ü®q, h‚ÇÅ‚ü©
    exists q; simp [upperBounds, s]
    intro r h‚ÇÇ
    have := h‚ÇÇ.trans (le_of_lt h‚ÇÅ)
    simp at this; exact this
  exists sSup s
  apply ofReal_isLUB.unique
  constructor
  ¬∑ simp [upperBounds]
    intro q h‚ÇÉ
    apply le_of_forall_rat_lt_imp_le
    intro r h‚ÇÑ; simp at h‚ÇÑ
    have h‚ÇÖ := lt_of_lt_of_le (Rat.cast_lt.mpr h‚ÇÑ) h‚ÇÉ
    rw [lt_isLUB_iff (Real.isLUB_sSup h‚ÇÅ h‚ÇÇ)] at h‚ÇÖ
    rcases h‚ÇÖ with ‚ü®_, ‚ü®r', h‚ÇÖ, h‚ÇÜ‚ü©, h‚Çá‚ü©
    subst h‚ÇÜ; simp at h‚Çá
    apply le_trans' h‚ÇÖ
    apply le_of_lt; simp [h‚Çá]
  ¬∑ intro b h‚ÇÉ
    simp [upperBounds] at h‚ÇÉ
    apply le_of_forall_rat_lt_imp_le
    intro r h‚ÇÑ
    apply h‚ÇÉ
    apply le_csSup h‚ÇÇ
    exists r
    simp [le_of_lt h‚ÇÑ]

theorem ofReal_add : @ofReal M (x + y) = ofReal x + ofReal y := by
  apply ofReal_isLUB.unique
  constructor
  ¬∑ intro z; simp; intro q h‚ÇÅ h‚ÇÇ; subst h‚ÇÇ
    apply le_of_forall_rat_lt_imp_le
    intro r h‚ÇÇ; simp at h‚ÇÇ
    let Œ¥ := (x + y - r) / 2
    have h‚ÇÉ : 0 < Œ¥ := by simp [Œ¥]; exact lt_of_lt_of_le (Rat.cast_lt.mpr h‚ÇÇ) h‚ÇÅ
    rcases exists_rat_btwn (sub_lt_self x h‚ÇÉ) with ‚ü®r‚ÇÅ, h‚ÇÑ, h‚ÇÖ‚ü©
    rcases exists_rat_btwn (sub_lt_self y h‚ÇÉ) with ‚ü®r‚ÇÇ, h‚ÇÜ, h‚Çá‚ü©
    trans r‚ÇÅ + r‚ÇÇ
    ¬∑ have := add_lt_add h‚ÇÑ h‚ÇÜ
      simp [sub_add_sub_comm, Œ¥, ‚ÜêRat.cast_add] at this
      rw [‚ÜêRat.cast_add, Rat.cast_le]
      exact le_of_lt this
    ¬∑ apply add_le_add <;> rw [‚ÜêofReal_rat, ofReal_le] <;> apply le_of_lt <;> assumption
  ¬∑ intro a h‚ÇÅ; simp [upperBounds] at h‚ÇÅ
    apply le_of_forall_rat_lt_imp_le
    intro q h‚ÇÇ
    let Œ¥ := (@ofReal M x + @ofReal M y - q) / 2
    have h‚ÇÉ : 0 < Œ¥ := by simp [Œ¥, h‚ÇÇ]
    rcases exists_rat_btwn (sub_lt_self (ofReal x) h‚ÇÉ) with ‚ü®r‚ÇÅ, h‚ÇÑ, h‚ÇÖ‚ü©
    rcases exists_rat_btwn (sub_lt_self (ofReal y) h‚ÇÉ) with ‚ü®r‚ÇÇ, h‚ÇÜ, h‚Çá‚ü©
    trans r‚ÇÅ + r‚ÇÇ
    ¬∑ have := add_lt_add h‚ÇÑ h‚ÇÜ
      simp [sub_add_sub_comm, Œ¥, ‚ÜêRat.cast_add] at this
      rw [‚ÜêRat.cast_add, Rat.cast_le]
      exact le_of_lt this
    ¬∑ rw [‚ÜêRat.cast_add]; apply h‚ÇÅ; simp
      apply add_le_add <;> rw [‚Üê@ofReal_le M, ofReal_rat] <;> apply le_of_lt <;> assumption

theorem ofReal_neg : @ofReal M (-x) = -ofReal x := by
  rw [eq_neg_iff_add_eq_zero, ‚ÜêofReal_add, neg_add_cancel, ofReal_zero]

lemma exists_sqrt (a : M) (h : 0 ‚â§ a) : ‚àÉ b, 0 ‚â§ b ‚àß b ^ 2 = a := by
  let s : Set M := { x | 0 ‚â§ x ‚àß x ^ 2 ‚â§ a }
  have h‚ÇÅ : s.Nonempty := by exists 0; simp [s, h]
  have h‚ÇÇ : BddAbove s := by
    rcases exists_nat_gt a with ‚ü®n, h‚ÇÇ‚ü©
    have h‚ÇÉ : 0 < n := by
      have := lt_of_le_of_lt h h‚ÇÇ
      simp at this; exact this
    exists n
    intro b ‚ü®h‚ÇÑ, h‚ÇÖ‚ü©
    rw [‚Üêpow_le_pow_iff_left‚ÇÄ (n := 2)]
    ¬∑ apply h‚ÇÖ.trans; apply (le_of_lt h‚ÇÇ).trans
      apply le_self_pow‚ÇÄ
      ¬∑ rw [‚ÜêofReal_one, ‚ÜêRat.cast_natCast, ‚ÜêofReal_rat, ofReal_le]
        simp [Nat.succ_le]; exact Nat.pos_of_ne_zero (ne_zero_of_lt h‚ÇÉ)
      ¬∑ simp
    ¬∑ exact h‚ÇÑ
    ¬∑ simp
    ¬∑ simp
  rcases exists_lub s h‚ÇÅ h‚ÇÇ with ‚ü®b, h‚ÇÉ‚ü©
  exists b
  have h‚ÇÑ : 0 ‚â§ b := by apply h‚ÇÉ.left; simp [s]; exact h
  simp [h‚ÇÑ]
  by_contra h‚ÇÖ
  apply lt_or_gt_of_ne at h‚ÇÖ
  rcases h‚ÇÖ with h‚ÇÖ | h‚ÇÖ
  ¬∑ let Œ¥ := min 1 ((a - b ^ 2) / (2 * b + 1))
    have h‚ÇÜ : 0 < Œ¥ := by
      apply lt_min (by simp)
      apply div_pos
      ¬∑ simp; exact h‚ÇÖ
      ¬∑ apply lt_of_lt_of_le zero_lt_one; simp; exact h‚ÇÑ
    have h‚Çá : (b + Œ¥) ^ 2 ‚â§ a := by
      calc
        (b + Œ¥) ^ 2 = b ^ 2 + Œ¥ * (2 * b + Œ¥) := by rw [add_pow_two, mul_add, ‚Üêadd_assoc, mul_comm Œ¥, pow_two Œ¥]
        _ ‚â§ b ^ 2 + Œ¥ * (2 * b + 1) := by simp [add_le_add_iff_left, mul_le_mul_left h‚ÇÜ]; apply min_le_left
        _ ‚â§ b ^ 2 + (a - b ^ 2) := by
          rw [add_le_add_iff_left, ‚Üêle_div_iff‚ÇÄ]
          ¬∑ apply min_le_right
          ¬∑ apply lt_of_lt_of_le zero_lt_one; simp; exact h‚ÇÑ
        _ = a := by simp
    have h‚Çà : b + Œ¥ ‚àà s := ‚ü®add_nonneg h‚ÇÑ (le_of_lt h‚ÇÜ), h‚Çá‚ü©
    apply h‚ÇÉ.left at h‚Çà
    simp at h‚Çà
    exact not_lt_of_ge h‚Çà h‚ÇÜ
  ¬∑ have h‚ÇÜ : 0 < b := by
      by_contra h‚ÇÜ; simp at h‚ÇÜ; rw [le_antisymm h‚ÇÜ h‚ÇÑ] at h‚ÇÖ; simp at h‚ÇÖ; exact not_lt_of_ge h h‚ÇÖ
    let Œ¥ := (b ^ 2 - a) / (2 * b)
    have h‚Çá : 0 < Œ¥ := by
      apply div_pos
      ¬∑ simp; exact h‚ÇÖ
      ¬∑ simp; exact h‚ÇÜ
    have h‚Çà : (b - Œ¥) ^ 2 ‚â• a := by
      calc
        (b - Œ¥) ^ 2 = b ^ 2 - Œ¥ * (2 * b - Œ¥) := by rw [sub_pow_two, mul_sub, ‚Üêsub_add, mul_comm Œ¥, pow_two Œ¥]
        _ ‚â• b ^ 2 - Œ¥ * (2 * b) := by apply sub_le_sub_left; rw [mul_le_mul_left h‚Çá]; simp; exact le_of_lt h‚Çá
        _ ‚â• b ^ 2 - (b ^ 2 - a) := by apply sub_le_sub_left; rw [‚Üêle_div_iff‚ÇÄ]; simp; exact h‚ÇÜ
        _ = a := by simp
    have h‚Çâ : b - Œ¥ ‚àà upperBounds s := by
      intro c ‚ü®h', h''‚ü©
      apply le_trans' h‚Çà at h''
      rw [pow_le_pow_iff_left‚ÇÄ] at h''
      ¬∑ exact h''
      ¬∑ exact h'
      ¬∑ simp [Œ¥]; rw [div_le_iff‚ÇÄ]
        ¬∑ simp [two_mul, mul_add, pow_two, add_assoc]
          exact add_nonneg (mul_nonneg h‚ÇÑ h‚ÇÑ) h
        ¬∑ simp; exact h‚ÇÜ
      ¬∑ simp
    apply h‚ÇÉ.right at h‚Çâ
    simp at h‚Çâ
    exact not_lt_of_ge h‚Çâ h‚Çá

theorem ofReal_mul {x y} : @ofReal M (x * y) = ofReal x * ofReal y := by
  wlog h : 0 < x generalizing x y
  ¬∑ simp at h
    rcases lt_or_eq_of_le h with h | h
    ¬∑ apply neg_pos_of_neg at h
      apply this (y := y) at h
      simp [ofReal_neg, neg_mul] at h
      exact h
    ¬∑ simp [h, ofReal_zero]
  wlog h' : 0 < y generalizing x y
  ¬∑ simp at h'
    rcases lt_or_eq_of_le h' with h' | h'
    ¬∑ apply neg_pos_of_neg at h'
      apply this h at h'
      simp [ofReal_neg, neg_mul] at h'
      exact h'
    ¬∑ simp [h', ofReal_zero]
  apply ofReal_isLUB.unique
  constructor
  ¬∑ intro z; simp; intro q h‚ÇÅ h‚ÇÇ; subst h‚ÇÇ
    apply le_of_forall_rat_lt_imp_le
    intro r h‚ÇÇ; simp at h‚ÇÇ
    by_cases h‚ÇÉ : r > 0
    ¬∑ let Œ¥ := ‚àö(x * y / r)
      have h‚ÇÑ : 1 < Œ¥ := by
        simp [Œ¥, Real.lt_sqrt]; rw [lt_div_iff‚ÇÄ]
        ¬∑ simp; exact lt_of_lt_of_le (Rat.cast_lt.mpr h‚ÇÇ) h‚ÇÅ
        ¬∑ simp [h‚ÇÉ]
      rcases exists_rat_btwn (div_lt_self h h‚ÇÑ) with ‚ü®r‚ÇÅ, h‚ÇÖ, h‚ÇÜ‚ü©
      rcases exists_rat_btwn (div_lt_self h' h‚ÇÑ) with ‚ü®r‚ÇÇ, h‚Çá, h‚Çà‚ü©
      trans r‚ÇÅ * r‚ÇÇ
      ¬∑ have := mul_lt_mul'' h‚ÇÖ h‚Çá
          (div_nonneg (le_of_lt h) (le_trans zero_le_one (le_of_lt h‚ÇÑ)))
          (div_nonneg (le_of_lt h') (le_trans zero_le_one (le_of_lt h‚ÇÑ)))
        rw [‚Üêmul_div_mul_comm] at this
        simp [Œ¥] at this
        rw [‚ÜêReal.sqrt_mul, Real.sqrt_mul_self, div_div_cancel‚ÇÄ] at this
        ¬∑ simp [‚ÜêRat.cast_mul] at this
          rw [‚ÜêRat.cast_mul, Rat.cast_le]
          exact le_of_lt this
        ¬∑ simp [ne_of_gt h, ne_of_gt h']
        ¬∑ apply div_nonneg (mul_nonneg (le_of_lt h) (le_of_lt h'))
          simp; exact le_of_lt h‚ÇÉ
        ¬∑ apply div_nonneg (mul_nonneg (le_of_lt h) (le_of_lt h'))
          simp; exact le_of_lt h‚ÇÉ
      ¬∑ apply mul_le_mul
        ¬∑ rw [‚ÜêofReal_rat, ofReal_le]; exact le_of_lt h‚ÇÜ
        ¬∑ rw [‚ÜêofReal_rat, ofReal_le]; exact le_of_lt h‚Çà
        ¬∑ simp; rw [‚ÜêRat.cast_le (K := ‚Ñù), Rat.cast_zero]
          apply le_trans' (le_of_lt h‚Çá)
          exact div_nonneg (le_of_lt h') (le_trans zero_le_one (le_of_lt h‚ÇÑ))
        ¬∑ rw [‚ÜêofReal_zero, ofReal_le]; exact le_of_lt h
    ¬∑ simp at h‚ÇÉ
      trans 0
      ¬∑ simp; exact h‚ÇÉ
      ¬∑ apply mul_nonneg <;> rw [‚ÜêofReal_zero, ofReal_le] <;> apply le_of_lt <;> assumption
  ¬∑ intro a h‚ÇÅ; simp [upperBounds] at h‚ÇÅ
    apply le_of_forall_rat_lt_imp_le
    intro q h‚ÇÇ
    by_cases h‚ÇÉ : q > 0
    ¬∑ rcases exists_sqrt (@ofReal M x * @ofReal M y / q : M)
        (by
          apply div_nonneg
          ¬∑ apply mul_nonneg <;> rw [‚ÜêofReal_zero, ofReal_le] <;> apply le_of_lt <;> assumption
          ¬∑ simp; exact le_of_lt h‚ÇÉ) with ‚ü®Œ¥, h‚ÇÑ, h‚ÇÖ‚ü©
      have h‚ÇÜ : 1 < Œ¥ := by
        rw [‚Üêpow_lt_pow_iff_left‚ÇÄ (n := 2) (by simp) h‚ÇÑ (by simp)]
        rw [h‚ÇÖ, lt_div_iff‚ÇÄ]
        ¬∑ simp; exact h‚ÇÇ
        ¬∑ simp; exact h‚ÇÉ
      rcases exists_rat_btwn (div_lt_self (a := ofReal x) (by rw [‚ÜêofReal_zero, ofReal_lt]; exact h) h‚ÇÜ) with ‚ü®r‚ÇÅ, h‚Çá, h‚Çà‚ü©
      rcases exists_rat_btwn (div_lt_self (a := ofReal y) (by rw [‚ÜêofReal_zero, ofReal_lt]; exact h') h‚ÇÜ) with ‚ü®r‚ÇÇ, h‚Çâ, h‚ÇÅ‚ÇÄ‚ü©
      trans r‚ÇÅ * r‚ÇÇ
      ¬∑ have := mul_lt_mul'' h‚Çá h‚Çâ
          (div_nonneg (by rw [‚ÜêofReal_zero, ofReal_le]; exact le_of_lt h) (le_trans zero_le_one (le_of_lt h‚ÇÜ)))
          (div_nonneg (by rw [‚ÜêofReal_zero, ofReal_le]; exact le_of_lt h') (le_trans zero_le_one (le_of_lt h‚ÇÜ)))
        rw [‚Üêmul_div_mul_comm, ‚Üêpow_two, h‚ÇÖ, div_div_cancel‚ÇÄ] at this
        ¬∑ exact le_of_lt this
        ¬∑ apply ne_of_gt; apply mul_pos <;> rw [‚ÜêofReal_zero, ofReal_lt] <;> assumption
      ¬∑ rw [‚ÜêRat.cast_mul]; apply h‚ÇÅ; simp
        apply mul_le_mul
        ¬∑ rw [‚ÜêofReal_rat, ofReal_lt] at h‚Çà; exact le_of_lt h‚Çà
        ¬∑ rw [‚ÜêofReal_rat, ofReal_lt] at h‚ÇÅ‚ÇÄ; exact le_of_lt h‚ÇÅ‚ÇÄ
        ¬∑ simp; rw [‚ÜêRat.cast_le (K := M), Rat.cast_zero]
          apply le_trans' (le_of_lt h‚Çâ)
          apply div_nonneg
          ¬∑ rw [‚ÜêofReal_zero, ofReal_le]; exact le_of_lt h'
          ¬∑ exact (le_trans zero_le_one (le_of_lt h‚ÇÜ))
        ¬∑ exact le_of_lt h
    ¬∑ simp at h‚ÇÉ
      trans 0
      ¬∑ simp; exact h‚ÇÉ
      ¬∑ rw [‚ÜêRat.cast_zero]; apply h‚ÇÅ; simp; exact mul_nonneg (le_of_lt h) (le_of_lt h')

theorem ofReal_inv : @ofReal M x‚Åª¬π = (ofReal x)‚Åª¬π := by
  by_cases h : x = 0
  ¬∑ simp [h, ofReal_zero]
  ¬∑ rw [‚Üêmul_eq_one_iff_eq_inv‚ÇÄ, ‚ÜêofReal_mul, inv_mul_cancel‚ÇÄ h, ofReal_one]
    intro h'; rw [‚ÜêofReal_zero] at h'; exact h (ofReal_injective h')

noncomputable def model_iso_ùì° (M : Real.Model) : ùì° ‚âÉ·¥π M.toStructure where
  toEquiv := Equiv.ofBijective ofReal ‚ü®ofReal_injective, ofReal_surjective‚ü©
  on_func
  | .zero, v => by simp; apply ofReal_zero
  | .one, v => by simp; apply ofReal_one
  | .add, v => by rw [Vec.eq_two (_ ‚àò _)]; apply ofReal_add
  | .neg, v => by rw [Vec.eq_one (_ ‚àò _)]; apply ofReal_neg
  | .mul, v => by rw [Vec.eq_two (_ ‚àò _)]; apply ofReal_mul
  on_rel
  | .le, v => by rw [Vec.eq_two (_ ‚àò _)]; symm; apply ofReal_le

noncomputable def categorical : Real.Categorical
| M‚ÇÅ, M‚ÇÇ => .trans (.symm (model_iso_ùì° M‚ÇÅ)) (model_iso_ùì° M‚ÇÇ)

end SecondOrder.Language.Theory.Real
